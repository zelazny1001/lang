import os
import openpyxl
import xlsxwriter
import time

INPUT_SPREADSHEET_PATH = 'J:/projects/sheet-logic/summarization_word_clusters.xlsx'
OUTPUT_SPREADSHEET_PATH = os.path.splitext(INPUT_SPREADSHEET_PATH)[0] + '_cps_analysis.xlsx'
OUTPUT_WORKSHEET_NAME = "cps_analysis"

HEADER_COLUMNS = ["CallId", "BRANCH", "INTENT", "UTTERANCE", "SUMMARY", "Cluster", "Assess", "Accuracy", "Hallucination"]
COLUMN_WIDTHS = {
    "CallId": 26,
    "BRANCH": 8,
    "INTENT": 14,
    "UTTERANCE": 61,
    "SUMMARY": 61,
    "Cluster": 8,
    "Assess": 8,
    "Accuracy": 9,
    "Hallucination": 13
}

def combine_sheets(input_path, output_path):
    wb_in = openpyxl.load_workbook(input_path, data_only=True)
    all_rows = []
    header = None
    for i, sheet in enumerate(wb_in.worksheets):
        rows = list(sheet.iter_rows(values_only=True))
        if not rows:
            continue
        if i == 0:
            header = list(rows[0])
        for row in rows[1:]:
            all_rows.append(list(row))
    return header, all_rows

def write_output(header, rows, output_path):
    wb_out = xlsxwriter.Workbook(output_path)
    ws = wb_out.add_worksheet(OUTPUT_WORKSHEET_NAME)
    header_fmt = wb_out.add_format({
        'font_name': 'Aptos',
        'font_size': 10,
        'bold': True,
        'align': 'left',
        'valign': 'top',
        'text_wrap': True
    })
    normal_fmt = wb_out.add_format({
        'font_name': 'Aptos',
        'font_size': 9,
        'align': 'left',
        'valign': 'top',
        'text_wrap': True
    })
    for col_idx, col_name in enumerate(HEADER_COLUMNS):
        ws.write(0, col_idx, col_name, header_fmt)
        width = COLUMN_WIDTHS.get(col_name, 10)
        ws.set_column(col_idx, col_idx, width, normal_fmt)
    for row_idx, row in enumerate(rows, start=1):
        for col_idx, col_name in enumerate(HEADER_COLUMNS):
            try:
                value = row[col_idx]
            except IndexError:
                value = ""
            ws.write(row_idx, col_idx, value, normal_fmt)
    ws.freeze_panes(1, 0)
    ws.autofilter(0, 0, row_idx, len(HEADER_COLUMNS) - 1)
    wb_out.close()

if __name__ == '__main__':
    start_time = time.time()
    header, rows = combine_sheets(INPUT_SPREADSHEET_PATH, OUTPUT_SPREADSHEET_PATH)
    write_output(header, rows, OUTPUT_SPREADSHEET_PATH)
    elapsed = time.time() - start_time
    if elapsed >= 60:
        print(f"Elapsed time: {elapsed/60:.2f} minutes")
    else:
        print(f"Elapsed time: {elapsed:.2f} seconds")