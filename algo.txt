package analyzer;

import java.util.Map;
import java.util.HashMap;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioFormat;

public class G711Codec {
    private static final int BIAS = 132;
    public static final Map<Byte, Integer> muLawDecodeMap = new HashMap<>();

    static {
        for (int i=0; i<=255; i++) {
            byte b = (byte) i;
            muLawDecodeMap.put(b, decodeAlgorithm(b));
        }
    }

    public static int decodeByte(byte b) {
        return muLawDecodeMap.get(b);
    }

    public static float toNormalizedPCM(byte b) {
        return muLawDecode(b) / 32768.0f;
    }

    public static float[] g711ByteArrayToNormalizedPCM(byte[] g711Data) {
        float[] pcmData = new float[g711Data.length];
        for (int i = 0; i < g711Data.length; i ++) {
            pcmData[i] = toNormalizedPCM(g711Data[i]);
        }
        return pcmData;
    }

    public static float[] muLawToFloat(byte[] muLawData) {
        float[] pcmData = new float[muLawData.length];
        for (int i = 0; i < muLawData.length; i++) {
            pcmData[i] = muLawDecode(muLawData[i]) / 32768.0f;
        }
        return pcmData;
    }

    private static int muLawDecode(byte muLawByte) {
        muLawByte = (byte) ~muLawByte;

        int sign = muLawByte & 0x80;
        int exponent = (muLawByte & 0x70) >> 4;
        int mantissa = muLawByte & 0x0F;
        int sample = ((mantissa << 3) + BIAS) << (exponent + 2);
        if (sign != 0) {
            sample = -sample;
        }
        return sample;
    }

    private static int decodeAlgorithm(byte g711Byte) { // decode 8-bit G711 mulaw byte into a 16-bit signed PCM value

        // 16-bit signed value
        g711Byte = (byte) ~g711Byte;

        int sign = g711Byte & 0x80;
        int exponent = (g711Byte & 0x70) >> 4;
        int mantissa = g711Byte & 0x0F;
        int sample = (mantissa << (exponent + 3)) + (BIAS << exponent) - BIAS;
        if (sign != 0) {
            sample = -sample;
        }
        return sample;
    }

    public static AudioInputStream convertG711ToAudioStream(byte[] g711) {
        AudioInputStream result = null;
        float sampleRate = 8000.0f;
        int sampleSizeInBits = 16;
        int channels = 1;
        boolean signed = true;
        boolean bigEndian = false;
        byte[] pcmData = g711ByteArrayToPCMByteArray(g711);
        AudioFormat format = new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
        result = new AudioInputStream(new ByteArrayInputStream(pcmData),
                format, pcmData.length / format.getFrameSize());
        return result;
    }

    public static byte[] g711ByteArrayToPCMByteArray(byte[] g711Data) {
        byte[] pcmData = new byte[g711Data.length * 2];
        for (int i = 0; i < g711Data.length; i ++) {
            int pcmSample = decodeAlgorithm(g711Data[i]);
            pcmData[2 * i] = (byte) (pcmSample & 0xFF);
            pcmData[2 * i + 1] = (byte) ((pcmSample >> 8) & 0xFF);
        }
        return pcmData;
    }

    public static byte[] readAllBytes(InputStream inputStream) {
        try {
            byte[] buffer = new byte[8192];
            int bytesRead;
            ByteArrayOutputStream output = new ByteArrayOutputStream();
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                output.write(buffer, 0, bytesRead);
            }
            return output.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
            return new byte[0];
        }
    }
}

=======================

package analyzer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;

public class VADAnalyzer {
    private static final Map<String, byte[]> fileDataMap = new HashMap<>();
    private static byte[] activeFileData;
    private static String activeFileName;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("VADAnalyzer started. Enter commands:");
        String input;
        while (true) {
            input = scanner.nextLine();
            if (input.trim().isEmpty()) continue;
            String[] commands = input.split("\\s+");
            String command = commands[0].toLowerCase();
            switch (command) {
                case "quit":
                case "exit":
                case "q":
                    System.out.println("Exiting VADAnalyzer.");
                    scanner.close();
                    return;
                case "load":
                    if (commands.length > 1) {
                        load(commands[1]);
                    } else {
                        System.out.println("Error: 'load' command requires the name of the G711 raw file to be loaded.");
                    }
                    break;
                case "play":
                    if (commands.length > 2) {
                        play(Integer.parseInt(commands[1]), Integer.parseInt(commands[2]));
                    } else {
                        System.out.println("Error: 'play' command requires the start and end integer indices.");
                    }
                    break;
                case "append":
                    if (commands.length > 2) {
                        append(Integer.parseInt(commands[1]), Integer.parseInt(commands[2]));
                    } else {
                        System.out.println("Error: 'append' command requires the start and end integer indices.");
                    }
                    break;
                default:
                    System.out.println("Invalid command. Try again.");
            }
        }
    }

    private static void load(String fileName) {
        File directory = new File("/path/to/search/directory");
        File[] files = directory.listFiles();
        List<File> matchedFiles = new ArrayList<>();
        if (files != null) {
            for (File file : files) {
                if (file.getName().contains(fileName)) {
                    matchedFiles.add(file);
                }
            }
        }
        if (matchedFiles.isEmpty()) {
            System.out.println("No file matches found. Please enter the full path to the file.");
        } else if (matchedFiles.size() == 1) {
            loadFileIntoMemory(matchedFiles.get(0));
        } else {
            System.out.println("Multiple files match the description:");
            for (int i = 0; i < matchedFiles.size(); i++) {
                System.out.println((i + 1) + ": " + matchedFiles.get(i).getName());
            }
            System.out.println("Enter the number of the file you want to load:");
            Scanner scanner = new Scanner(System.in);
            int choice = scanner.nextInt();
            loadFileIntoMemory(matchedFiles.get(choice - 1));
        }
    }

    private static void loadFileIntoMemory(File file) {
        try {
            InputStream inputStream = new FileInputStream(file);
            byte[] data = G711Codec.readAllBytes(inputStream);
            String fileName = file.getName();
            fileDataMap.put(fileName, data);
            activeFileData = data;
            activeFileName = fileName;
            System.out.println("Loaded file: " + fileName);
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + file.getPath());
        } catch (IOException e) {
            System.out.println("Error reading file: " + file.getPath());
        }
    }

    private static void play(int start, int end) {
        if (activeFileData == null) {
            System.out.println("No file loaded.");
            return;
        }
        try {
            byte[] slice = Arrays.copyOfRange(activeFileData, start, end + 1);
            AudioInputStream audioStream = G711Codec.convertG711ToAudioStream(slice);
            Clip clip = AudioSystem.getClip();
            clip.open(audioStream);
            clip.start();
            while (!clip.isRunning())
                Thread.sleep(10);
            while (clip.isRunning())
                Thread.sleep(10);
            clip.close();
        } catch (Exception e) {
            System.out.println("Error playing audio: " + e.getMessage());
        }
    }

    private static void append(int start, int end) {
        if (activeFileData == null) {
            System.out.println("No file loaded.");
            return;
        }
        try {
            File output = new File("/tmp/VAD-Analysis.txt");
            try (PrintWriter writer = new PrintWriter(new FileOutputStream(output, true))) {
                for (int i = start; i <= end; i++) {
                    float normalized = G711Codec.toNormalizedPCM(activeFileData[i]);
                    writer.println(activeFileName + "," + i + "," + normalized);
                }
            }
            System.out.println("Data appended to /tmp/VAD-Analysis.txt");
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }
}