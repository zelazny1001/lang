conversation_id	transcript_line	test_complaint_type	test_complaint_summary
1	trx chunk A 01	noComplaint	none
1	trx chunk A 02	noComplaint	none
1	trx chunk A 03	CT1	summary A 03
1	trx chunk A 04	noComplaint	none
1	trx chunk A 05	CT4	summary A 05
1	trx chunk A 06	noComplaint	none
1	trx chunk A 07	noComplaint	none
1	trx chunk A 08	noComplaint	none
1	trx chunk A 09	noComplaint	none
1	trx chunk A 10	CT8	summary A 10
1	trx chunk A 11	noComplaint	none
1	trx chunk A 12	noComplaint	none
2	trx chunk B 01	CT5	summary B 01
2	trx chunk B 02	CT7	summary B 02
2	trx chunk B 03	CT6	summary B 03
2	trx chunk B 04	noComplaint	none
2	trx chunk B 05	CT6	summary B 05
2	trx chunk B 06	noComplaint	none
2	trx chunk B 07	noComplaint	none
2	trx chunk B 08	CT3	summary B 08
2	trx chunk B 09	noComplaint	none
2	trx chunk B 10	noComplaint	none
2	trx chunk B 11	noComplaint	none
2	trx chunk B 12	noComplaint	none
2	trx chunk B 13	CT9	summary B 13
3	trx chunk C 01	noComplaint	none
3	trx chunk C 02	CT2	summary C 02
3	trx chunk C 03	noComplaint	none
3	trx chunk C 04	noComplaint	none
3	trx chunk C 05	noComplaint	none
3	trx chunk C 06	CT6	summary C 06
3	trx chunk C 07	noComplaint	none
3	trx chunk C 08	noComplaint	none
3	trx chunk C 09	noComplaint	none
3	trx chunk C 10	noComplaint	none
3	trx chunk C 11	noComplaint	none
3	trx chunk C 12	CT10	summary C 10

======================

import requests
import pandas as pd

conversationComplaintDetails = {}
is_testing = True

def get_complaint_type(currentTranscript, row_data):
    if is_testing and row_data:
        print(f'is_testing: {is_testing}')
        return row_data.get("test_complaint_type", "noComplaint")
    response = requests.post(
        "http://localhost:9500/complaintType",
        json={"transcript": currentTranscript}
    )
    response.raise_for_status()
    return response.json().get("complaintType", "noComplaint")

def get_complaint_summary(currentTranscript, complaint_type, row_data):
    if complaint_type == "noComplaint":
        return "none"
    if is_testing and row_data:
        return row_data.get("test_complaint_summary", "simulated summary")
    response = requests.post(
        "http://localhost:9501/complaintSummary",
        json={"transcript": currentTranscript}
    )
    response.raise_for_status()
    return response.json().get("summary", "")

def store_no_complaint_block(conversation_data):
    if conversation_data["noComplaintBuffer"]:
        conversation_data["complaints"].append({
            "complaintType": "noComplaint",
            "transcription": conversation_data["noComplaintBuffer"].copy(),
            "complaintSummary": "none"
        })
        conversation_data["noComplaintBuffer"] = []  # Reset buffer

def orchestrateConversation(conversationID, currentTranscript, row_data=None):
    if conversationID not in conversationComplaintDetails:
        conversationComplaintDetails[conversationID] = {
            "noComplaintBuffer": [],  # Reset buffer for new conversations
            "complaints": []          # Store detected complaints
        }

    conversation_data = conversationComplaintDetails[conversationID]
    no_complaint_buffer = conversation_data["noComplaintBuffer"]

    # append the current transcript to the buffer
    no_complaint_buffer.append(currentTranscript)

    # aggregate the buffered transcripts
    aggregated_transcript = " ".join(no_complaint_buffer)

    # determine the complaint type using the aggregated transcript
    complaint_type = get_complaint_type(aggregated_transcript, row_data)

    if complaint_type == "noComplaint":
        return  # continue accumulating 'noComplaint' lines
    else:
        complaint_summary = get_complaint_summary(aggregated_transcript, complaint_type, row_data)

        # store the detected complaint with all relevant 'noComplaint' lines
        conversation_data["complaints"].append({
            "complaintType": complaint_type,
            "transcription": no_complaint_buffer.copy(),
            "complaintSummary": complaint_summary
        })

        # reset the 'noComplaint' buffer after processing the current complaint type
        conversation_data["noComplaintBuffer"] = []

def read_spreadsheet(spreadsheet_path: str, sheet_name=0):
    df = pd.read_excel(spreadsheet_path, sheet_name=sheet_name, engine="openpyxl")
    return df.to_dict(orient="records")

def run_with_spreadsheet(spreadsheet_path: str):
    spreadsheet_rows = read_spreadsheet(spreadsheet_path)
    last_conversation_id = None

    for row in spreadsheet_rows:
        conversation_id = str(row["conversation_id"])
        transcript_line = str(row["transcript_line"])

        # conversation ID has changed. store any remaining noComplaint block before resetting
        if last_conversation_id and conversation_id != last_conversation_id:
            store_no_complaint_block(conversationComplaintDetails[last_conversation_id])

            # new conversation entry
            conversationComplaintDetails[conversation_id] = {
                "noComplaintBuffer": [],
                "complaints": []
            }

        orchestrateConversation(conversation_id, transcript_line, row_data=row)
        last_conversation_id = conversation_id  # the last seen conversation

    # make sure that the last conversation's noComplaint block is stored
    if last_conversation_id:
        store_no_complaint_block(conversationComplaintDetails[last_conversation_id])

    return conversationComplaintDetails

def show_complaint_details(conversation_complaint_details):
    print("\nconversation complaint details:")
    for conversation_id, data in conversation_complaint_details.items():
        print(f"\nConversation ID: {conversation_id}")
        print("\nComplaint Blocks:")
        for block in data["complaints"]:
            print(f"\nComplaint Type: {block['complaintType']}")
            print(f"Complaint Summary: {block['complaintSummary']}")
            print("Transcriptions:")
            for transcript in block["transcription"]:
                print(f"  - {transcript}")

if __name__ == "__main__":
    test_data_path = "j:/projects/complaints/orchestration-test-data.xlsx"
    final_data = run_with_spreadsheet(test_data_path)
    show_complaint_details(final_data)