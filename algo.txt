<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Cosine Similarity Heatmap</title>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <style>
    body { font-family: Arial, sans-serif; }
    .axis text {
      font-size: 10px;
      text-anchor: middle;
    }
    .axis line,
    .axis path {
      stroke: #ccc;
    }
  </style>
</head>
<body>
<div id="heatmap"></div>

<script>
  // Set up the dimensions and margins for the heatmap
  const margin = { top: 150, right: 30, bottom: 100, left: 150 };
  const cellSize = 20;
  const width = 800;
  const height = 800;

  // Load the CSV data
  d3.csv("your_data_file.csv").then(data => {
    // Extract unique call chunk labels
    const callChunks = Array.from(new Set(data.map(d => d.call_chunk1).concat(data.map(d => d.call_chunk2))));
    
    // Map each call chunk to an index for positioning in the matrix
    const chunkIndex = {};
    callChunks.forEach((chunk, i) => chunkIndex[chunk] = i);

    // Create an empty similarity matrix with dimensions based on the number of call chunks
    const matrix = callChunks.map(() => Array(callChunks.length).fill(0));

    // Populate the matrix with similarity data
    data.forEach(d => {
      const rowIndex = chunkIndex[d.call_chunk1];
      const colIndex = chunkIndex[d.call_chunk2];
      matrix[rowIndex][colIndex] = +d.similarity;
    });

    // Set up the color scale for similarity values from -1 to 1
    const colorScale = d3.scaleSequential(d3.interpolateRdYlBu)
                         .domain([-1, 1]);

    // Append an SVG element to the #heatmap div
    const svg = d3.select("#heatmap").append("svg")
                  .attr("width", width + margin.left + margin.right)
                  .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                  .attr("transform", `translate(${margin.left},${margin.top})`);

    // Draw each cell of the heatmap
    svg.selectAll("rect")
       .data(data)
       .enter()
       .append("rect")
       .attr("x", d => chunkIndex[d.call_chunk2] * cellSize)
       .attr("y", d => chunkIndex[d.call_chunk1] * cellSize)
       .attr("width", cellSize)
       .attr("height", cellSize)
       .style("fill", d => colorScale(+d.similarity));

    // Add row labels
    svg.append("g")
       .selectAll("text")
       .data(callChunks)
       .enter()
       .append("text")
       .attr("x", -6)
       .attr("y", (d, i) => i * cellSize + cellSize / 2)
       .attr("text-anchor", "end")
       .attr("alignment-baseline", "middle")
       .text(d => d);

    // Add column labels
    svg.append("g")
       .selectAll("text")
       .data(callChunks)
       .enter()
       .append("text")
       .attr("x", (d, i) => i * cellSize + cellSize / 2)
       .attr("y", -6)
       .attr("text-anchor", "start")
       .attr("alignment-baseline", "middle")
       .attr("transform", "rotate(-90)")
       .text(d => d);

    // Add color legend
    const legendWidth = 200;
    const legendHeight = 10;
    const legend = svg.append("g")
                      .attr("transform", `translate(${width - legendWidth - 20}, ${height + margin.bottom - 30})`);

    // Create color gradient for legend
    const legendGradient = legend.append("defs")
                                 .append("linearGradient")
                                 .attr("id", "legend-gradient")
                                 .attr("x1", "0%").attr("y1", "0%")
                                 .attr("x2", "100%").attr("y2", "0%");
    legendGradient.append("stop").attr("offset", "0%").attr("stop-color", colorScale(-1));
    legendGradient.append("stop").attr("offset", "100%").attr("stop-color", colorScale(1));

    legend.append("rect")
          .attr("width", legendWidth)
          .attr("height", legendHeight)
          .style("fill", "url(#legend-gradient)");

    legend.append("text")
          .attr("x", -5)
          .attr("y", legendHeight / 2)
          .attr("text-anchor", "end")
          .attr("alignment-baseline", "middle")
          .text("-1");

    legend.append("text")
          .attr("x", legendWidth + 5)
          .attr("y", legendHeight / 2)
          .attr("text-anchor", "start")
          .attr("alignment-baseline", "middle")
          .text("1");

    legend.append("text")
          .attr("x", legendWidth / 2)
          .attr("y", legendHeight + 15)
          .attr("text-anchor", "middle")
          .text("Cosine Similarity");
  });
</script>
</body>
</html>