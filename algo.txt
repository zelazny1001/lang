package analyzer;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;

public class TranscriptTokenFilter {

    private static final int TRANSCRIPT_INDEX = 5;
    private static final int TOKEN_COUNT_INDEX = 6;
    private static final int SAMPLES_INDEX = 7;

    public static List<String> filterTranscriptTokenAnalysis(String inputFilepath, int sampleThreshold, int tokenThreshold) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(inputFilepath));
        if (lines.isEmpty()) {
            throw new IllegalArgumentException("Input file is empty: " + inputFilepath);
        }

        return lines.stream()
                .skip(1)
                .filter(line -> {
                    String[] parts = line.split("\\|");
                    int samples = Integer.parseInt(parts[SAMPLES_INDEX].trim());
                    int tokenCount = Integer.parseInt(parts[TOKEN_COUNT_INDEX].trim());
                    return samples >= sampleThreshold && tokenCount <= tokenThreshold;
                })
                .collect(Collectors.toList());
    }

    public static List<String> filterTranscriptTokenAnalysisBkgndVsSignal(String inputFilepath, int tokenThreshold) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(inputFilepath));
        if (lines.isEmpty()) {
            throw new IllegalArgumentException("Input file is empty: " + inputFilepath);
        }

        return lines.stream()
                .skip(1)
                .filter(line -> {
                    String[] parts = line.split("\\|");
                    int samples = Integer.parseInt(parts[SAMPLES_INDEX].trim());
                    int tokenCount = Integer.parseInt(parts[TOKEN_COUNT_INDEX].trim());
                    return tokenCount >= tokenThreshold;
                })
                .collect(Collectors.toList());
    }

    public static String writeFilteredLinesToFile(String inputFilepath, int sampleThreshold, int tokenThreshold, boolean hasZeroth) throws IOException {
        Path inputPath = Paths.get(inputFilepath);
        String directory = inputPath.getParent().toString();
        String fileName = inputPath.getFileName().toString();

        int extensionIndex = fileName.lastIndexOf('.');
        String baseName = (extensionIndex > 0) ? fileName.substring(0, extensionIndex) : fileName;
        String extension = (extensionIndex > 0) ? fileName.substring(extensionIndex) : "";
        String outputFileName = baseName + "_" + sampleThreshold + "_" + tokenThreshold + extension;

        List<String> headerAndLines = Files.readAllLines(inputPath).stream()
                .limit(1) // the header line on the input file
                .collect(Collectors.toList());

        List<String> filteredLines = filterTranscriptTokenAnalysis(inputFilepath, sampleThreshold, tokenThreshold);

        Map<String, List<String>> groupedLines = filteredLines.stream()
                .collect(Collectors.groupingBy(line -> line.split("\\|")[0]));

        for (Map.Entry<String, List<String>> entry : groupedLines.entrySet()) {
            String filename = entry.getKey();
            List<String> lines = entry.getValue();

            if (hasZeroth) {
                String batchHeader = String.join("|", filename, "0", "1", "100", "\"\"", "0", "100", "250.00"); // 2 second background reference
                headerAndLines.add(batchHeader);
            }
            headerAndLines.addAll(lines);
        }

        Path outputPath = Paths.get(directory, outputFileName);
        Files.write(outputPath, headerAndLines);

        return outputPath.toString();
    }

    public static String writeFilteredSignalBackgroundLinesToFile(String inputFilepath, int tokenThreshold) throws IOException {
        Path inputPath = Paths.get(inputFilepath);
        String directory = inputPath.getParent().toString();
        String fileName = inputPath.getFileName().toString();

        int extensionIndex = fileName.lastIndexOf('.');
        String baseName = (extensionIndex > 0) ? fileName.substring(0, extensionIndex) : fileName;
        String extension = (extensionIndex > 0) ? fileName.substring(extensionIndex) : "";
        String outputFileName = baseName + "_" + tokenThreshold + extension;

        List<String> headerAndLines = Files.readAllLines(inputPath).stream()
                .limit(1) // the header line on the input file
                .collect(Collectors.toList());

        List<String> filteredLines = filterTranscriptTokenAnalysisBkgndVsSignal(inputFilepath, tokenThreshold);

        Map<String, List<String>> groupedLines = filteredLines.stream()
                .collect(Collectors.groupingBy(line -> line.split("\\|")[0]));

        for (Map.Entry<String, List<String>> entry : groupedLines.entrySet()) {
            String filename = entry.getKey();
            List<String> lines = entry.getValue();
            headerAndLines.addAll(lines);
        }

        Path outputPath = Paths.get(directory, outputFileName);
        Files.write(outputPath, headerAndLines);

        return outputPath.toString();
    }
}