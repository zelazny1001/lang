package analyzer;

import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;

import org.jtransforms.fft.FloatFFT_1D;

public class FFTAnalyzer {

    public static void main(String[] args) throws IOException {
        FFTAnalyzer analyzer = new FFTAnalyzer();
        analyzer.processData();
    }

    public void processData() throws IOException {
        List<TranscriptionWindow> records = readDataFromFile("/tmp/formatted-analysis.txt");

        try (BufferedWriter writer = new BufferedWriter(new FileWriter("/tmp/fft-analysis.txt"))) {
            for (TranscriptionWindow record : records) {
                String filePath = "/asr-data/rod-calls/" + record.getFilename();
                
                byte[] audioBytes = G711Codec.readAllBytes(new FileInputStream(filePath));
                float[] audioFloats = G711Codec.g711ByteArrayToNormalizedPCM(audioBytes);
                float[] fftResult = FFTProcessor.getFFT(audioFloats);

                // Write record data (3a)
                writer.write(String.format("%s | %d | %d | %s%n", record.getFilename(), record.getStart(), record.getEnd(), record.getTranscript()));
                
                // Write FFT data (3b)
                for (float fftValue : fftResult) {
                    writer.write(fftValue + System.lineSeparator());
                }
            }
        }
    }

    private List<TranscriptionWindow> readDataFromFile(String path) throws IOException {
        return Files.lines(Paths.get(path))
                .skip(1) // Skip the header line
                .map(line -> {
                    String[] parts = line.split("\\|");
                    return new TranscriptionWindow(
                            parts[0].trim(),
                            Integer.parseInt(parts[1 + 1].trim()),  // seqNum
                            Integer.parseInt(parts[2 + 1].trim()),  // start
                            Integer.parseInt(parts[3 + 1].trim()),  // end
                            parts[4 + 1].trim(),                    // transcript
                            Integer.parseInt(parts[5 + 1].trim()),  // tokens
                            Integer.parseInt(parts[6 + 1].trim()),  // samples
                            Integer.parseInt(parts[7 + 1].trim())   // samplesPerToken
                    );
                })
                .collect(Collectors.toList());
    }
}