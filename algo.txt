import java.util.Arrays;
import java.util.List;

public class TranscriptionEngine {

    public List<Integer> getTranscriptionBoundaries(List<Boolean> accepted, int seqNum) {
        if (accepted == null || accepted.size() < 2) {
            return null;
        }
        if (seqNum <= 0 || seqNum >= accepted.size() || accepted.get(seqNum) || !accepted.get(seqNum - 1)) {
            return null;
        }
        int end = seqNum - 1; // last TRUE in the accepted list. transcription will start here
        int start = end;
        while (start >= 0 && accepted.get(start)) { // find first TRUE in the last contiguous block of accepted TRUEs.
            start--;
        }
        start++;
        if (start <= end) {
            return Arrays.asList(start, end);
        }
        return null;
    }

    public byte[] getTranscriptionBytes(List<Boolean> accepted, List<byte[]> speechFromVAD, int seqNum) {
        List<Integer> boundary = getTranscriptionBoundaries(accepted, seqNum);
        if (boundary != null) {
            return getByteRange(speechFromVAD, boundary);
        }
        return null;
    }

    public byte[] getByteRange(List<byte[]> bytes, List<Integer> range) {
        int byteArrayLength = bytes.get(0).length;
        int span = range.get(1) - range.get(0) + 1;
        int totalLength = byteArrayLength * span;
        byte[] resultArray = new byte[totalLength];
        int resultPos = 0;

        for (int i = range.get(0); i <= range.get(1); i++) {
            System.arraycopy(bytes.get(i), 0, resultArray, resultPos, byteArrayLength);
            resultPos += byteArrayLength;
        }
        return resultArray;
    }
}
===========================

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;

import transcription.TranscriptionEngine;

public class TranscriptionEngineTest {

    private TranscriptionEngine engine;

    @BeforeEach
    public void initialize() {
        engine = new TranscriptionEngine();
    }

    @Test
    public void testNoTranscriptionPairs_FalseOnly() {
        List<Boolean> accept = Arrays.asList(false, false, false, false, false);
        assertNull(engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testTranscriptionBoundaries_SingleBlock() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, true, false);
        List<Integer> expected = Arrays.asList(2, 4);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 5));
    }

    @Test
    public void testTranscriptionBoundaries_MultipleBlocks() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, true, false, true, true, false);
        List<Integer> expected = Arrays.asList(6, 7);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 8));
    }

    @Test
    public void testTranscriptionBoundaries_LastTrueBlockSingleElement() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, false, false, true, false);
        List<Integer> expected = Arrays.asList(6, 6);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 7));
    }

    @Test
    public void testTranscriptionBoundaries_MultipleBlocks_LastSingleElement() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, false, true, true, true, false);
        List<Integer> expected = Arrays.asList(5, 7);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 8));
    }

    @Test
    public void testTranscriptionBoundaries_SingleTrueElement() {
        List<Boolean> accept = Arrays.asList(false, true, false);
        List<Integer> expected = Arrays.asList(1, 1);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 2));
    }

    @Test
    public void testTranscriptionBoundaries_FirstPosition() {
        List<Boolean> accept = Arrays.asList(true, false);
        List<Integer> expected = Arrays.asList(0, 0);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testTranscriptionBoundaries_InvalidSeqNum() {
        List<Boolean> accept = Arrays.asList(false, true, true, false);
        assertNull(engine.getTranscriptionBoundaries(accept, 0));
        assertNull(engine.getTranscriptionBoundaries(accept, 4));
    }

    @Test
    public void testNoTranscriptionPairs_TrueOnly() {
        List<Boolean> accept = Arrays.asList(true, true, true, true);
        assertNull(engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testGetByteRange_SinglePosition() {
        List<byte[]> bytes = Arrays.asList(
                new byte[]{1, 2, 3},
                new byte[]{4, 5, 6},
                new byte[]{7, 8, 9}
        );

        List<Integer> range = Arrays.asList(1, 1);  // Single position range (index 1)
        byte[] expected = new byte[]{4, 5, 6};
        byte[] result = engine.getByteRange(bytes, range);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGetByteRange_ContiguousRange() {
        List<byte[]> bytes = Arrays.asList(
                new byte[]{1, 2, 3},
                new byte[]{4, 5, 6},
                new byte[]{7, 8, 9}
        );

        List<Integer> range = Arrays.asList(1, 2);  // Contiguous range from index 1 to 2
        byte[] expected = new byte[]{4, 5, 6, 7, 8, 9};
        byte[] result = engine.getByteRange(bytes, range);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGetByteRange_FullRange() {
        List<byte[]> bytes = Arrays.asList(
                new byte[]{1, 2, 3},
                new byte[]{4, 5, 6},
                new byte[]{7, 8, 9}
        );

        List<Integer> range = Arrays.asList(0, 2);  // Full range from index 0 to 2
        byte[] expected = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
        byte[] result = engine.getByteRange(bytes, range);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGetTranscriptionBytes_SingleBlock() {
        List<Boolean> accepted = Arrays.asList(false, true, true, true, false);
        List<byte[]> speech = Arrays.asList(
                new byte[]{1, 2, 3},  // false block
                new byte[]{4, 5, 6},  // true block
                new byte[]{7, 8, 9},  // true block
                new byte[]{10, 11, 12},  // true block
                new byte[]{13, 14, 15}   // false block
        );

        byte[] expected = new byte[]{4, 5, 6, 7, 8, 9, 10, 11, 12};
        byte[] result = engine.getTranscriptionBytes(accepted, speech, 4);
        assertArrayEquals(expected, result);
    }

    @Test
    public void testGetTranscriptionBytes_EmptyResult() {
        List<Boolean> accepted = Arrays.asList(false, false, false, false, false);
        List<byte[]> speech = Arrays.asList(
                new byte[]{11, 12, 13},  // false block
                new byte[]{14, 15, 16},  // false block
                new byte[]{17, 18, 19},  // false block
                new byte[]{20, 21, 22},  // false block
                new byte[]{23, 24, 25}   // false block
        );

        byte[] result = engine.getTranscriptionBytes(accepted, speech, 3);
        assertNull(result);
    }

    @Test
    public void testGetTranscriptionBytes_MultipleBlocks() {
        List<Boolean> accepted = Arrays.asList(
                false, false, true, true, false,
                false, true, true, true, false
        );
        List<byte[]> speech = Arrays.asList(
                new byte[]{11, 12, 13},  // false block
                new byte[]{14, 15, 16},  // false block
                new byte[]{1, 2, 3},     // true block
                new byte[]{4, 5, 6},     // true block
                new byte[]{17, 18, 19},  // false block
                new byte[]{20, 21, 22},  // false block
                new byte[]{7, 8, 9},     // true block
                new byte[]{10, 11, 12},  // true block
                new byte[]{13, 14, 15},  // true block
                new byte[]{23, 24, 25}   // false block
        );

        byte[] expected = new byte[]{7, 8, 9, 10, 11, 12, 13, 14, 15};
        byte[] result = engine.getTranscriptionBytes(accepted, speech, 9);
        assertArrayEquals(expected, result);
    }
}