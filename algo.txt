import os
import glob
import asyncio
import math
import httpx  # Import httpx for the AsyncClient

# Some global variables
global_var1 = ...
global_var2 = ...
sr = 8_000
secondsToTranscribe = 0.02

# Function to process all .raw files in a directory
async def processFromDirectory(dirName):
    # Get all .raw files in the directory
    raw_files = glob.glob(os.path.join(dirName, "*.raw"))
    
    for audioFile in raw_files:
        print(f"Processing file: {audioFile}")
        
        with open(audioFile, 'rb') as f:
            audioInBytes = f.read()
        
        numChunks = math.ceil(len(audioInBytes) / (sr * secondsToTranscribe))
        
        # Run the main routine for the current file
        await main(audioInBytes, numChunks)

# Function to initiate a call and create a task for streamCall
async def callInitiation(audioInBytes, numChunks):
    # Example: Replace these with actual values
    convID = "example_conv_id"
    mediaHost = "example_host"
    mediaPort = 12345
    oAuthToken = "example_token"
    
    async with httpx.AsyncClient(verify=False) as connection:
        # Perform any necessary setup or API calls here
        ...
        
        # Create a task for streamCall and pass audioInBytes and numChunks
        asyncio.create_task(streamCall(convID, mediaHost, mediaPort, oAuthToken, audioInBytes, numChunks))

# Function to stream audio chunks
async def streamCall(convID, mediaHost, mediaPort, oAuthToken, audioInBytes, numChunks):
    async with aioudp.connect(mediaHost, mediaPort) as connection:
        for i in range(numChunks):
            chunkToBeTranscribed = audioInBytes[int(i * sr * secondsToTranscribe):((i + 1) * sr * secondsToTranscribe)]
            # Process the chunk (e.g., send it over the connection)
            ...

# Main function to orchestrate the process
async def main(audioInBytes, numChunks):
    # Run callInitiation for the current file
    await callInitiation(audioInBytes, numChunks)
    
    # Wait for all tasks to complete (e.g., streamCall)
    await asyncio.gather(*asyncio.all_tasks() - {asyncio.current_task()})

# Run the processFromDirectory function
if __name__ == "__main__":
    dirName = "path/to/your/directory"  # Replace with the path to your directory
    asyncio.run(processFromDirectory(dirName))