package analyzer;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TranscriptScrubber {

    public static List<String> getScrubbedTranscript(String inputFilePath) {
        try (Stream<String> lines = Files.lines(Paths.get(inputFilePath))) {
            List<String> allLines = lines.collect(Collectors.toList());
            if (allLines.isEmpty()) return new ArrayList<>();

            Map<String, Integer> columnIndex = new HashMap<>();
            String[] headers = allLines.get(0).split("\\|");
            for (int i = 0; i < headers.length; i++) {
                columnIndex.put(headers[i].trim().toLowerCase(), i);
            }

            Integer filenameIndex = columnIndex.get("filename");
            Integer transcriptIndex = columnIndex.get("transcript");
            Integer tokensIndex = columnIndex.get("tokens");
            Integer samplesIndex = columnIndex.get("samples");

            if (filenameIndex == null || transcriptIndex == null || tokensIndex == null || samplesIndex == null) {
                return new ArrayList<>();
            }

            return allLines.stream().skip(1)
                    .filter(line -> shouldExcludeLine(line, filenameIndex, transcriptIndex, tokensIndex, samplesIndex))
                    .collect(Collectors.toList());

        } catch (IOException e) {
            return new ArrayList<>();
        }
    }

    private static boolean shouldExcludeLine(String line, int filenameIndex, int transcriptIndex, int tokensIndex, int samplesIndex) {
        String[] columns = line.split("\\|");
        String transcriptValue = columns[transcriptIndex].trim().toLowerCase();
        boolean isThankYou = transcriptValue.equalsIgnoreCase("thank you")
                             || transcriptValue.equalsIgnoreCase("thank you.")
                             || transcriptValue.equalsIgnoreCase("thank you,");
        return !(columns[samplesIndex].equals("250")
                && (isThankYou || columns[tokensIndex].equals("1")));
    }

    public static void writeScrubbedTranscriptToFile(List<String> lines, String outputFilePath) {
        try {
            Files.write(Paths.get(outputFilePath), lines);
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }

    public static void createScrubbedAnalysis(String inputFilePath, String outputFilePath) {
        List<String> scrubbedLines = getScrubbedTranscript(inputFilePath);
        writeScrubbedTranscriptToFile(scrubbedLines, outputFilePath);
    }

    public static void main(String[] args) {
        String inputFilePath = "/tmp/vad/customer-side-analysis.txt";
        String outputFilePath = "/tmp/vad/to-xx/customer-scrubbed-analysis.txt";
        createScrubbedAnalysis(inputFilePath, outputFilePath);
    }
}