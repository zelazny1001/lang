The Problem:
Given the current state of Erica Assist Cortex (Consumer Cortex modified for Erica Assist Domain)
Put in a switch such that SOLR feature can be turned off

The Challenge:
159 classes are SOLR-related
There are existing Cortex pipeline Spring Stereotype definitions (eg. @Component, @Service, etc.) that reference SOLR/related classes and code
[ Stereotypes are classes annotated using org.springframework.stereotype.* ]
These are loaded upon server startup during Spring component scan
There are several other stereotypes also loaded during component scan

Research:
Feature switch or Feature Toggle is a software pattern that:
    enables features to be turned on or off, without modifying the codebase
    through conditional registration of beans.
    
    Conditional (profile) registration enables certain components to be omitted
    from the scanning process during dependency injection that wires up the 
    Spring bean dependencies.
    
See also:    
https://martinfowler.com/articles/feature-toggles.html (general strategy)
https://docs.spring.io/spring-framework/docs/5.3.x/javadoc-api/org/springframework/context/annotation/Profile.html (javadoc)

Solution Implementation:
Apply Spring framework feature toggle to each of the affected:
@Component
@Service

Wherever these components are defined or injected through constructor or autowire

Benefits:
A single statically defined switch is all that is required to achieve a solution

The switch:
-Dspring.profiles.active=solr
can be used to turn SOLR back ON
Omitting this switch keeps SOLR off


What is nice about the semantics of the Spring feature switch:
a. If the switch is not explicitly declared, then:
Any classes that have not been annotated as @Profile("solr") are treated as "defaults"
These classes are scanned, injected, and wired as before
This means all un-Profiled components continue to work exactly as before

b. If the switch is not declared, then:
Any classes that have been annotated as @Profile("solr") will NOT be loaded during component scan

c. Since these components will not be scanned, and therefore will not exist; 
To counter the problem of the server failing to start due to unsatisified dependencies, such as:
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'solrDAO': Unsatisfied dependency expressed through field 'solrDAO'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException ...

We will need to tell Spring that these dependencies can be NULL (or it is ok to be null):
1. in the injected constructor argument list
@Nullable SolrDAO solrDAO

2. in the @Autowire
@Autowire(required = false)