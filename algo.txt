import java.util.ArrayList;
import java.util.List;

public class TranscriptionDiagnostics {

    public List<Integer> getTranscriptionPairs(List<Boolean> accepted) {
        List<Integer> transcriptionPairs = new ArrayList<>();
        Integer mrSpeech = null;

        for (int seqNum = 0; seqNum < accepted.size(); seqNum++) {
            if (seqNum == 0) continue;
            boolean current = accepted.get(seqNum);
            boolean previous = accepted.get(seqNum - 1);

            if (!previous && current) { // most recent speech location
                mrSpeech = seqNum;
            } else if (previous && !current) {
                if (mrSpeech != null) {
                    int transcriptionMark = seqNum;
                    transcriptionPairs.add(mrSpeech);
                    transcriptionPairs.add(transcriptionMark - 1);
                }
            }
        }
        return transcriptionPairs;
    }
}

==========================

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Arrays;
import java.util.List;

public class TranscriptionDiagnosticsTest {

    private TranscriptionDiagnostics diagnostics;

    @BeforeEach
    public void setUp() {
        diagnostics = new TranscriptionDiagnostics();
    }

    @Test
    public void testGetTranscriptionPairs() {
        List<Boolean> accepted = Arrays.asList(false, false, true, true, false, false, true, false, true, true, false);
        List<Integer> expected = Arrays.asList(2, 3, 6, 6, 8, 9);
        assertEquals(expected, diagnostics.getTranscriptionPairs(accepted));
    }

    @Test
    public void testNoTransitions() {
        List<Boolean> accepted = Arrays.asList(false, false, false, false);
        List<Integer> expected = Arrays.asList();
        assertEquals(expected, diagnostics.getTranscriptionPairs(accepted));

        accepted = Arrays.asList(true, true, true, true);
        assertEquals(expected, diagnostics.getTranscriptionPairs(accepted));
    }

    @Test
    public void testSingleTransition() {
        List<Boolean> accepted = Arrays.asList(false, true, false);
        List<Integer> expected = Arrays.asList(1, 1);
        assertEquals(expected, diagnostics.getTranscriptionPairs(accepted));
    }

    @Test
    public void testMultipleTransitions() {
        List<Boolean> accepted = Arrays.asList(false, true, false, true, false, true, false);
        List<Integer> expected = Arrays.asList(1, 1, 3, 3, 5, 5);
        assertEquals(expected, diagnostics.getTranscriptionPairs(accepted));
    }

    @Test
    public void testEdgeCases() {
        List<Boolean> accepted = Arrays.asList(false, true, true, false, false, true, false, true, false, false);
        List<Integer> expected = Arrays.asList(1, 2, 5, 5, 7, 7);
        assertEquals(expected, diagnostics.getTranscriptionPairs(accepted));
    }
}