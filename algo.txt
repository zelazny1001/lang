package transcription;

import java.util.Arrays;
import java.util.List;

public class TranscriptionEngine {

    public List<Integer> getTranscriptionBoundaries(List<Boolean> accept, int seqNum) {
        if (accept == null || accept.size() < 2) {
            return null;
        }

        if (seqNum <= 0 || seqNum >= accept.size() || accept.get(seqNum) || !accept.get(seqNum - 1)) {
            return null;
        }

        int end = seqNum - 1; // last TRUE in the accept list. transcription will end here.
        int start = end;

        while (start >= 0 && accept.get(start)) { // find first TRUE in last contiguous block of accept TRUEs.
            start--;
        }
        start++;

        if (start <= end) {
            return Arrays.asList(start, end);
        }
        return null;
    }
}

=============================================

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;

import transcription.TranscriptionEngine;

public class TranscriptionEngineTest {

    @Test
    public void testNoTranscriptionPairs_FalseOnly() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, false, false, false, false);
        assertNull(engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testTranscriptionBoundaries_SingleBlock() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, false, true, true, true, false);
        List<Integer> expected = Arrays.asList(2, 4);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 5));
    }

    @Test
    public void testTranscriptionBoundaries_MultipleBlocks() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, false, true, true, true, false, true, true, false);
        List<Integer> expected = Arrays.asList(6, 7);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 8));
    }

    @Test
    public void testTranscriptionBoundaries_LastTrueBlockSingleElement() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, false, true, true, false, false, true, false);
        List<Integer> expected = Arrays.asList(6, 6);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 7));
    }

    @Test
    public void testTranscriptionBoundaries_MultipleBlocks_LastSingleElement() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, false, true, true, false, true, true, true, false);
        List<Integer> expected = Arrays.asList(5, 7);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 8));
    }

    @Test
    public void testTranscriptionBoundaries_SingleTrueElement() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, true, false);
        List<Integer> expected = Arrays.asList(1, 1);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 2));
    }

    @Test
    public void testTranscriptionBoundaries_FirstPosition() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(true, false);
        List<Integer> expected = Arrays.asList(0, 0);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testTranscriptionBoundaries_InvalidSeqNum() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(false, true, true, false);
        assertNull(engine.getTranscriptionBoundaries(accept, 0));
        assertNull(engine.getTranscriptionBoundaries(accept, 4));
    }

    @Test
    public void testNoTranscriptionPairs_TrueOnly() {
        TranscriptionEngine engine = new TranscriptionEngine();
        List<Boolean> accept = Arrays.asList(true, true, true, true);
        assertNull(engine.getTranscriptionBoundaries(accept, 1));
    }
}