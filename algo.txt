<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Comparison</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <div class="file-loader-container">
            <div class="file-loader">
                <label for="groundTruthFileInput">Ground Truth File:</label>
                <input type="file" id="groundTruthFileInput">
            </div>
            <div class="file-loader">
                <label for="transcriptionFileInput">Transcription File:</label>
                <input type="file" id="transcriptionFileInput">
            </div>
        </div>
        <label for="exclude">Exclude Tokens (pipe-separated):</label>
        <input type="text" id="exclude" name="exclude" placeholder="Enter tokens separated by |">
        
        <div class="text-area-container">
            <div class="text-box">
                <label for="groundTruth">Ground Truth:</label>
                <div id="groundTruth" class="text-display" contenteditable="true"></div>
                <div class="button-container">
                    <button id="compareButton">Compare</button>
                </div>
            </div>
            <div class="text-box">
                <label for="transcription">Transcription:</label>
                <div id="transcription" class="text-display" contenteditable="true"></div>
                <div class="button-container">
                    <button id="clearButton">Clear</button>
                </div>
            </div>
        </div>

        <div class="wer-container">
            <label for="werField">WER:</label>
            <input type="text" id="werField" readonly>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

============================

document.getElementById("groundTruthFileInput").addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => populateTextArea("groundTruth", reader.result);
    reader.readAsText(file);
});

document.getElementById("transcriptionFileInput").addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => processTranscriptionFile(reader.result);
    reader.readAsText(file);
});

document.getElementById("compareButton").addEventListener("click", () => {
    const groundTruthDiv = document.getElementById("groundTruth");
    const transcriptionDiv = document.getElementById("transcription");
    const exclusionInput = document.getElementById("exclude").value;
    const exclusions = parseExclusions(exclusionInput);
    const groundTruthText = preprocessText(groundTruthDiv.innerText, exclusions).split(/\s+/);
    const transcriptionText = preprocessText(transcriptionDiv.innerText, exclusions).split(/\s+/);
    const { alignedGroundTruth, alignedTranscription } = alignTexts(groundTruthText, transcriptionText);
    groundTruthDiv.innerHTML = formatHighlightedText(alignedGroundTruth, alignedTranscription);
    transcriptionDiv.innerHTML = formatHighlightedText(alignedTranscription, alignedGroundTruth);
    fetchWER(groundTruthDiv.innerText, transcriptionDiv.innerText);
});

document.getElementById("clearButton").addEventListener("click", () => {
    const groundTruthDiv = document.getElementById("groundTruth");
    const transcriptionDiv = document.getElementById("transcription");
    groundTruthDiv.innerText = groundTruthDiv.innerText;
    transcriptionDiv.innerText = transcriptionDiv.innerText;
    document.getElementById("werField").value = "";
});

function processTranscriptionFile(fileContent) {
    const groundTruthFileName = getGroundTruthFileName();
    if (!groundTruthFileName) {
        alert("Ground Truth filename not found. Please load a Ground Truth file first.");
        return;
    }

    const key = extractGroundTruthKey(groundTruthFileName);
    if (!key) {
        alert("Unable to extract key from Ground Truth filename.");
        return;
    }

    const rows = parsePipeSeparatedFile(fileContent);
    const filteredRows = filterAndSortRows(rows, key);
    const finalRows = applyAdditionalFilters(filteredRows);
    const transcripts = finalRows.map(row => row.transcript).join("\n");
    populateTextArea("transcription", transcripts);
}

function applyAdditionalFilters(rows) {
    return rows.filter(row => {
        const samples = parseInt(row.samples, 10);
        const tokens = parseInt(row.tokens, 10);
        return samples === 250 && tokens <= 2;
    });
}

function getGroundTruthFileName() {
    const fileInput = document.getElementById("groundTruthFileInput");
    return fileInput.files[0]?.name || null;
}

function extractGroundTruthKey(filename) {
    const match = filename.match(/ground_truth_(.*?)\./);
    return match ? match[1] : null;
}

function parsePipeSeparatedFile(content) {
    const lines = content.split("\n").filter(line => line.trim() !== "");
    const headers = lines[0].split("|").map(header => header.trim());
    const rows = lines.slice(1).map(line => {
        const values = line.split("|").map(value => value.trim());
        const row = {};
        headers.forEach((header, index) => {
            row[header] = values[index];
        });
        row.seqNum = parseInt(row.seqNum, 10);
        return row;
    });
    return rows;
}

function filterAndSortRows(rows, key) {
    return rows
        .filter(row => row.filename.includes(key))
        .sort((a, b) => a.seqNum - b.seqNum);
}

function populateTextArea(areaId, content) {
    const textArea = document.getElementById(areaId);
    textArea.innerText = content;
}

function preprocessText(text, exclusions) {
    text = text.replace(/\n+/g, " ");
    text = text.replace(/<.*?>/g, " ");
    text = text.replace(/[.,!?;]/g, " ").trim();
    exclusions.forEach(word => {
        const regex = new RegExp(`\\b${word}\\b`, "gi");
        text = text.replace(regex, " ");
    });
    return text.replace(/\s+/g, " ");
}

function parseExclusions(exclusionInput) {
    return exclusionInput.split('|').map(word => word.trim()).filter(word => word !== "");
}

function fetchWER(groundTruth, transcription) {
    const werField = document.getElementById("werField");
    fetch("http:/my.private.server:8080/findwer", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ groundTruth: groundTruth, transcription: transcription }),
    })
        .then(response => {
            if (!response.ok) throw new Error(`Server error: ${response.status}`);
            return response.text();
        })
        .then(data => { werField.value = data; })
        .catch(() => { werField.value = "Error"; });
}

function alignTexts(groundTruth, transcription) {
    const m = groundTruth.length;
    const n = transcription.length;
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));
    for (let i = 0; i <= m; i++) dp[i][0] = i;
    for (let j = 0; j <= n; j++) dp[0][j] = j;
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (groundTruth[i - 1].toLowerCase() === transcription[j - 1].toLowerCase()) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]);
            }
        }
    }
    const alignedGroundTruth = [];
    const alignedTranscription = [];
    let i = m, j = n;
    while (i > 0 || j > 0) {
        if (i > 0 && j > 0 && groundTruth[i - 1].toLowerCase() === transcription[j - 1].toLowerCase()) {
            alignedGroundTruth.unshift(groundTruth[i - 1]);
            alignedTranscription.unshift(transcription[j - 1]);
            i--; j--;
        } else if (i > 0 && (j === 0 || dp[i - 1][j] <= dp[i][j - 1])) {
            alignedGroundTruth.unshift(groundTruth[i - 1]);
            alignedTranscription.unshift("");
            i--;
        } else {
            alignedGroundTruth.unshift("");
            alignedTranscription.unshift(transcription[j - 1]);
            j--;
        }
    }
    return { alignedGroundTruth, alignedTranscription };
}

function formatHighlightedText(primaryText, secondaryText) {
    return primaryText.map((word, index) => {
        const isDifferent = word.toLowerCase() !== (secondaryText[index] || "").toLowerCase();
        if (isDifferent) {
            if (word === "") return "";
            if (secondaryText[index] === "") return `<span class="highlight">${word}</span>`;
            return `<span class="highlight">${word}</span>`;
        }
        return word;
    }).join(' ');
}

==================

body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

.container {
    max-width: 900px;
    margin: 0 auto;
}

label {
    font-weight: bold;
    margin-bottom: 5px;
    display: block;
}

input[type="text"] {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
}

.file-loader-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    gap: 15px;
}

.file-loader {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

#groundTruthFileInput, #transcriptionFileInput {
    flex: 1;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.text-area-container {
    display: flex;
    justify-content: space-between;
    gap: 25px;
    margin-bottom: 15px;
}

.text-box {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-width: 0;
}

.text-display {
    width: 100%;
    height: 300px;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    overflow-y: auto;
    background-color: white;
    font-family: Arial, sans-serif;
    font-size: 14px;
    color: black;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.button-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

button {
    padding: 10px 15px;
    font-size: 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#compareButton {
    background-color: #DC3545;
    color: white;
}

#clearButton {
    background-color: #007BFF;
    color: white;
}

.highlight {
    background-color: red !important;
    color: white !important;
    font-weight: normal;
    padding: 0;
    margin: 0;
    line-height: inherit;
    display: inline;
}

.wer-container {
    display: flex;
    align-items: center;
    margin-top: 20px;
    justify-content: center;
    gap: 10px;
}

#werField {
    padding: 8px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    width: 150px;
    text-align: center;
    background-color: #f9f9f9;
    color: black;
}