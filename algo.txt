public static String writeFilteredLinesToFile(String inputFilepath, int sampleThreshold, int tokenThreshold, boolean hasZeroth) throws IOException {
    Path inputPath = Paths.get(inputFilepath);
    String directory = inputPath.getParent().toString();
    String fileName = inputPath.getFileName().toString();

    int extensionIndex = fileName.lastIndexOf('.');
    String baseName = (extensionIndex > 0) ? fileName.substring(0, extensionIndex) : fileName;
    String extension = (extensionIndex > 0) ? fileName.substring(extensionIndex) : "";

    String outputFileName = baseName + "_" + sampleThreshold + "_" + tokenThreshold + extension;
    Path outputPath = Paths.get(directory, outputFileName);

    List<String> headerAndLines = Files.readAllLines(inputPath).stream()
            .limit(1) // Extract the header line
            .collect(Collectors.toList());

    List<String> filteredLines = filterTranscriptTokenAnalysis(inputFilepath, sampleThreshold, tokenThreshold);

    Map<String, List<String>> groupedLines = filteredLines.stream()
            .collect(Collectors.groupingBy(line -> line.split("\\|")[0]));

    for (Map.Entry<String, List<String>> entry : groupedLines.entrySet()) {
        String filename = entry.getKey();
        List<String> lines = entry.getValue();

        if (hasZeroth) {
            String batchHeader = String.join("|",
                    filename, "0", "1", "100", "\"\"", "0", "100", "250.00");
            headerAndLines.add(batchHeader);
        }
        headerAndLines.addAll(lines);
    }

    Files.write(outputPath, headerAndLines); // Write all lines to the file at once

    return outputPath.toString();
}
