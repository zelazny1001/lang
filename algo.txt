import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;

public class BatchTranscriber {

    private static final String ENDPOINT_URL = "http://whisper.transcribe.endpoint:1234";
    private static final String DEFAULT_OUTPUT_PATH = "/asr-data/diagnostics/transcription/";
    private static final String DEFAULT_G711_PATH = "/asr-data/diagnostics/";

    public static String callPostTranscription(String filename) throws IOException {
        RestTemplate restTemplate = new RestTemplate();
        File file = new File(filename);
        byte[] fileBytes = Files.readAllBytes(file.toPath());

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/octet-stream");

        HttpEntity<byte[]> requestEntity = new HttpEntity<>(fileBytes, headers);

        ResponseEntity<String> response = restTemplate.exchange(ENDPOINT_URL, HttpMethod.POST, requestEntity, String.class);

        if (response.getStatusCode().is2xxSuccessful()) {
            String responseBody = response.getBody();
            if (responseBody != null) {
                writeToFile(filename, responseBody);
            }
            return responseBody;
        } else {
            throw new IOException("Failed to get transcription: " + response.getStatusCode());
        }
    }

    private static String writeToFile(String inputFilename, String content) throws IOException {
        String outputFilename = DEFAULT_OUTPUT_PATH + inputFilename.substring(inputFilename.lastIndexOf('/') + 1, inputFilename.lastIndexOf('.')) + ".txt";
        File outputFile = new File(outputFilename);
        try (FileWriter writer = new FileWriter(outputFile)) {
            writer.write(content);
        }
        return outputFilename;
    }

    public static void processG711Files() throws IOException {
        File folder = new File(DEFAULT_G711_PATH);
        File[] listOfFiles = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".g711"));

        if (listOfFiles != null) {
            for (File file : listOfFiles) {
                if (file.isFile()) {
                    try {
                        String response = callPostTranscription(file.getAbsolutePath());
                        System.out.println("Transcription for file " + file.getName() + ": " + response);
                    } catch (IOException e) {
                        System.err.println("Error processing file " + file.getName() + ": " + e.getMessage());
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        try {
            processG711Files();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}