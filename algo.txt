import pandas as pd
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles import Font
import os
import sys

def transform_csv_to_excel(input_dir, output_dir):
    # Ensure output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        
    # Process each CSV file in the input directory
    for filename in os.listdir(input_dir):
        if filename.endswith(".csv"):
            input_csv_path = os.path.join(input_dir, filename)
            output_excel_path = os.path.join(output_dir, filename.replace(".csv", ".xlsx"))
            worksheet_name = filename.split('.')[0]  # Get filename without extension for worksheet name

            # Load CSV
            df = pd.read_csv(input_csv_path)

            # Check for required columns
            required_columns = {"Branch", "Intent", "Utterance"}
            if not required_columns.issubset(df.columns):
                print(f"Skipping '{input_csv_path}': Required columns not present.")
                continue

            # Filter columns
            filtered_df = df[["Branch", "Intent", "Utterance"]]

            # Write to Excel with OpenPyXL to apply formatting
            wb = Workbook()
            ws = wb.active
            ws.title = worksheet_name

            # Append rows to worksheet
            for row in dataframe_to_rows(filtered_df, index=False, header=True):
                ws.append(row)

            # Set column widths
            ws.column_dimensions["A"].width = 11  # Branch
            ws.column_dimensions["B"].width = 37  # Intent
            ws.column_dimensions["C"].width = 110  # Utterance

            # Set font to Arial 8 for each cell in the worksheet
            font_style = Font(name="Arial", size=8)
            for row in ws.iter_rows():
                for cell in row:
                    cell.font = font_style

            # Freeze the top row
            ws.freeze_panes = "A2"

            # Add filters to each column
            ws.auto_filter.ref = ws.dimensions

            # Save to Excel file, overwriting if it already exists
            wb.save(output_excel_path)

            # Print confirmation message
            print(f"Filename '{output_excel_path}' processed")

transform_csv_to_excel("/my/root/input_directory", "/my/root/output_directory")