    public static void convertTextToWav(String inputFilename, String outputFilename, float sampleRate, int channels) {
        try {
            List<byte[]> pcmDataList = new ArrayList<>();

            try (BufferedReader reader = Files.newBufferedReader(Paths.get(inputFilename))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    byte[] pcmBytes = convertLineToPCM(line);
                    if (pcmBytes != null) {
                        pcmDataList.add(pcmBytes);
                    }
                }
            }

            int totalBytes = pcmDataList.stream().mapToInt(arr -> arr.length).sum();
            byte[] allPcmData = new byte[totalBytes];
            int currentPos = 0;
            for (byte[] pcmBytes : pcmDataList) {
                System.arraycopy(pcmBytes, 0, allPcmData, currentPos, pcmBytes.length);
                currentPos += pcmBytes.length;
            }

            AudioFormat format = new AudioFormat(sampleRate, 16, channels, true, false);
            try (AudioInputStream audioInputStream = new AudioInputStream(
                    new ByteArrayInputStream(allPcmData),
                    format,
                    allPcmData.length / format.getFrameSize())) {
                AudioSystem.write(audioInputStream, AudioFileFormat.Type.WAVE, new File(outputFilename));
            }

        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static byte[] convertLineToPCM(String line) {
        String[] stringValues = line.trim().split(",");
        byte[] pcmBytes = new byte[stringValues.length * 2];
        for (int i = 0; i < stringValues.length; i++) {
            int value = Integer.parseInt(stringValues[i]);
            pcmBytes[2 * i] = (byte) (value & 0xFF);
            pcmBytes[2 * i + 1] = (byte) ((value >> 8) & 0xFF);
        }
        return pcmBytes;
    }