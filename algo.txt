package diagnostics;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;

import transcription.TranscriptionEngine;

public class TranscriptionEngineTest {

    private TranscriptionEngine engine;

    @BeforeEach
    public void initialize() {
        engine = new TranscriptionEngine();
    }

    @Test
    public void testNoTranscriptionPairs_FalseOnly() {
        List<Boolean> accept = Arrays.asList(false, false, false, false, false);
        assertNull(engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testTranscriptionBoundaries_SingleBlock() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, true, false);
        List<Integer> expected = Arrays.asList(2, 4);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 5));
    }

    @Test
    public void testTranscriptionBoundaries_MultipleBlocks() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, true, false, true, true, false);
        List<Integer> expected = Arrays.asList(6, 7);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 8));
    }

    @Test
    public void testTranscriptionBoundaries_LastTrueBlockSingleElement() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, false, false, true, false);
        List<Integer> expected = Arrays.asList(6, 6);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 7));
    }

    @Test
    public void testTranscriptionBoundaries_MultipleBlocks_LastSingleElement() {
        List<Boolean> accept = Arrays.asList(false, false, true, true, false, true, true, true, false);
        List<Integer> expected = Arrays.asList(5, 7);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 8));
    }

    @Test
    public void testTranscriptionBoundaries_SingleTrueElement() {
        List<Boolean> accept = Arrays.asList(false, true, false);
        List<Integer> expected = Arrays.asList(1, 1);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 2));
    }

    @Test
    public void testTranscriptionBoundaries_FirstPosition() {
        List<Boolean> accept = Arrays.asList(true, false);
        List<Integer> expected = Arrays.asList(0, 0);
        assertEquals(expected, engine.getTranscriptionBoundaries(accept, 1));
    }

    @Test
    public void testTranscriptionBoundaries_InvalidSeqNum() {
        List<Boolean> accept = Arrays.asList(false, true, true, false);
        assertNull(engine.getTranscriptionBoundaries(accept, 0));
        assertNull(engine.getTranscriptionBoundaries(accept, 4));
    }

    @Test
    public void testNoTranscriptionPairs_TrueOnly() {
        List<Boolean> accept = Arrays.asList(true, true, true, true);
        assertNull(engine.getTranscriptionBoundaries(accept, 1));
    }
}

==================

package diagnostics;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Arrays;
import java.util.List;

public class TranscriptionAnalyzerTest {

    @Test
    public void testTranscriptionPairs_MultipleBlocks() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(
                false, false, true, true, false, // Block 1: [2, 3]
                false, true, true, false,        // Block 2: [6, 7]
                false, true, false,              // Block 3: [10, 10]
                false, true, true, true, false,  // Block 4: [13, 15]
                false, false, true, false        // Block 5: [19, 19]
        );

        List<Integer> expected = Arrays.asList(2, 3, 6, 7, 10, 10, 13, 15, 19, 19);
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_SingleBlock() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(false, true, true, true, false);

        List<Integer> expected = Arrays.asList(1, 3);
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_NoTrueValues() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(false, false, false, false, false);

        List<Integer> expected = Arrays.asList();
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_AllTrueValues() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(true, true, true, true);

        List<Integer> expected = Arrays.asList();
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_SingleTrueValue() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(false, true, false);

        List<Integer> expected = Arrays.asList(1, 1);
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_TrueAtStartAndEnd() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(true, true, false, true, false, true, true, false, true, true);

        List<Integer> expected = Arrays.asList(0, 1, 3, 3, 5, 6);
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_EmptyList() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList();

        List<Integer> expected = Arrays.asList();
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }

    @Test
    public void testTranscriptionPairs_AlternatingTrueFalse() {
        TranscriptionAnalyzer analyzer = new TranscriptionAnalyzer();
        List<Boolean> accept = Arrays.asList(false, true, false, true, false, true, false);

        List<Integer> expected = Arrays.asList(1, 1, 3, 3, 5, 5);
        List<Integer> result = analyzer.getTranscriptionPairs(accept);
        assertEquals(expected, result);
    }
}
