package analyzer;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class Cipher {

    private static final Map<Character, Character> encryptionMap = new HashMap<>();
    private static final Map<Character, Character> decryptionMap = new HashMap<>();

    static {
        String lowerOriginal = "";
        String lowerCipher =   "";
        String upperOriginal = "";
        String upperCipher =   "";
        String digitsOriginal = "";
        String digitsCipher = "";

        for (int i = 0; i < lowerOriginal.length(); i++) {
            encryptionMap.put(lowerOriginal.charAt(i), lowerCipher.charAt(i));
            decryptionMap.put(lowerCipher.charAt(i), lowerOriginal.charAt(i));
        }
        for (int i = 0; i < upperOriginal.length(); i++) {
            encryptionMap.put(upperOriginal.charAt(i), upperCipher.charAt(i));
            decryptionMap.put(upperCipher.charAt(i), upperOriginal.charAt(i));
        }
        for (int i = 0; i < digitsOriginal.length(); i++) {
            encryptionMap.put(digitsOriginal.charAt(i), digitsCipher.charAt(i));
            decryptionMap.put(digitsCipher.charAt(i), digitsOriginal.charAt(i));
        }
    }

    public static String applyCipher(String text) {
        StringBuilder result = new StringBuilder();
        for (char c : text.toCharArray()) {
            result.append(encryptionMap.getOrDefault(c, c));
        }
        return result.toString();
    }

    public static String recoverOriginal(String text) {
        StringBuilder result = new StringBuilder();
        for (char c : text.toCharArray()) {
            result.append(decryptionMap.getOrDefault(c, c));
        }
        return result.toString();
    }

    public static void main(String[] args) throws IOException {
        String inputPath = "J:/recs/clear.txt";
        String outputPath = "J:/recs/clearout.txt";

        String content = new String(Files.readAllBytes(Paths.get(inputPath)));
        String encryptedContent = applyCipher(content);
        Files.write(Paths.get(outputPath), encryptedContent.getBytes());

        String decryptedContent = recoverOriginal(encryptedContent);
        System.out.println("Decrypted Content: " + decryptedContent);
    }
}