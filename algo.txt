    public static List<String> translateToPipeFormat(List<String> tabSeparatedLines) {
        return tabSeparatedLines.stream()
                .map(line -> {
                    String[] parts = line.split("\\t| {2,}"); // Split on TAB or 2+ spaces
                    if (parts.length != 3) return null;
                    String utterance = parts[0].trim();
                    String intent = parts[1].trim();
                    String features = Arrays.stream(parts[2].replaceAll("[\\[\\]']", "").trim().split(", "))
                            .map(String::trim)
                            .collect(Collectors.joining("%"));
                    return utterance + " | " + features + " | " + intent;
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toList());
    }

    public static void convertFormat(String inputFilepath, String outputFilename) {
        try {
            List<String> originalLines = Files.readAllLines(Paths.get(inputFilepath));
            List<String> convertedLines = translateToPipeFormat(originalLines);
            Path outputPath = Paths.get(Paths.get(inputFilepath).getParent().toString(), outputFilename);
            Files.write(outputPath, (String.join("\n", convertedLines) + "\n").getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException e) {
            throw new UncheckedIOException("Error processing file: " + inputFilepath, e);
        }
    }