    public static List<String> getPacketStatSummary(List<String> rows) {
        Map<Integer, List<String>> groupedByRegion = rows.stream()
                .collect(Collectors.groupingBy(
                        row -> Integer.parseInt(row.split(" / ")[0]),
                        LinkedHashMap::new,
                        Collectors.toList()
                ));

        List<String> result = new ArrayList<>();
        result.add("seqNum | maxRMS | start | end | transcription");

        for (Map.Entry<Integer, List<String>> entry : groupedByRegion.entrySet()) {
            int transcriptionRegion = entry.getKey();
            List<String> groupRows = entry.getValue();

            String transcription = groupRows.get(0).split(" / ")[1];
            double maxRMS = groupRows.stream()
                    .mapToDouble(row -> {
                        String[] parts = row.split(" / ");
                        String[] subParts = parts[3].split(",");
                        return Double.parseDouble(subParts[1].trim());
                    })
                    .max()
                    .orElse(0.0);

            int segmentPosition = Integer.parseInt(groupRows.get(0).split(" / ")[2]);
            int segmentEnd = Integer.parseInt(groupRows.get(0).split(" / ")[3].split(",")[0]);

            double start = segmentPosition / 50.0;
            double end = segmentEnd / 50.0;

            String formattedRow = String.format("%d | %.5f | %.3f | %.3f | %s",
                    transcriptionRegion, maxRMS, start, end, transcription);
            result.add(formattedRow);
        }

        return result;
    }

    public static void summarizeRMS(String inputDir) {
        try {
            Files.walk(Paths.get(inputDir))
                    .filter(Files::isDirectory)
                    .forEach(subDir -> {
                        Path statsFile = subDir.resolve("all_segment_stats.txt");
                        if (Files.exists(statsFile)) {
                            try {
                                List<String> rows = Files.readAllLines(statsFile);
                                List<String> summary = getPacketStatSummary(rows);
                                Path outputFile = subDir.resolve("rms_summary_stats.txt");
                                Files.write(outputFile, summary);
                            } catch (IOException e) {
                                System.err.println("Error processing file: " + statsFile + " - " + e.getMessage());
                            }
                        }
                    });
        } catch (IOException e) {
            System.err.println("Error walking directory: " + inputDir + " - " + e.getMessage());
        }
    }