import re
import requests
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter

SPREADSHEET_PATH = "j:/projects/sheet-logic/wer-test4.xlsx"
TARGET_WORKSHEETS = ["1234", "1345", "4567", "8901"]

CALL_ID_COL_NAME = "CallId"
GROUND_TRUTH_COL_NAME = "Ground Truth"
TRANSCRIPTION_COL_NAME = "Transcript"

S_COL_NAME = "S"
I_COL_NAME = "I"
D_COL_NAME = "D"
LINE_WER_COL_NAME = "WER_API"
CHECK_WER_COL_NAME = "WER_LOCAL"

SUMMARY_WORKSHEET_SUFFIX = "_summary"  # each summary worksheet will be named: <target_ws> + _summary

WER_POST_ENDPOINT = "https://wer_host:3281/word_error_rate"

def preprocess(text):
    if not text:
        return ""
    text = str(text)
    text = text.lower()
    text = re.sub(r"[.,\-?â€¦]", " ", text)
    text = re.sub(r"\{[^}]*\}", "", text)
    text = re.sub(r"[\[\]]", "", text)
    text = re.sub(r"\s+", " ", text)
    return text.strip()

def count_sid(ground_truth, transcript):
    gt_tokens = preprocess(ground_truth).split()
    tr_tokens = preprocess(transcript).split()
    m, n = len(gt_tokens), len(tr_tokens)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    # initialize base cases
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if gt_tokens[i - 1] == tr_tokens[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j - 1] + 1,   # substitution
                               dp[i][j - 1] + 1,       # insertion
                               dp[i - 1][j] + 1)       # deletion
    # backtrack to count operations
    i, j = m, n
    subs = inserts = deletes = 0
    while i > 0 or j > 0:
        if i > 0 and j > 0 and gt_tokens[i-1] == tr_tokens[j-1]:
            i -= 1
            j -= 1
        elif i > 0 and j > 0 and dp[i][j] == dp[i-1][j-1] + 1:
            subs += 1
            i -= 1
            j -= 1
        elif j > 0 and dp[i][j] == dp[i][j-1] + 1:
            inserts += 1
            j -= 1
        elif i > 0 and dp[i][j] == dp[i-1][j] + 1:
            deletes += 1
            i -= 1
        else:
            break
    return subs, inserts, deletes

def calculate_wer(ground_truth, transcript):
    subs, inserts, deletes = count_sid(ground_truth, transcript)
    gt_tokens = preprocess(ground_truth).split()
    if len(gt_tokens) == 0:
        return 0.0
    return round((subs + inserts + deletes) / len(gt_tokens), 4)

def set_column_widths(ws):
    headers = {cell.value: idx for idx, cell in enumerate(ws[1], start=1)}
    column_widths = {
        CALL_ID_COL_NAME: 23,
        TRANSCRIPTION_COL_NAME: 70,
        GROUND_TRUTH_COL_NAME: 70,
        LINE_WER_COL_NAME: 9,
        S_COL_NAME: 5,
        I_COL_NAME: 5,
        D_COL_NAME: 5,
        CHECK_WER_COL_NAME: 9
    }
    for header, width in column_widths.items():
        if header in headers:
            col_letter = get_column_letter(headers[header])
            ws.column_dimensions[col_letter].width = width

def apply_worksheet_formatting(ws):
    set_column_widths(ws)
    ws.freeze_panes = ws["A2"]
    last_col = get_column_letter(ws.max_column)
    ws.auto_filter.ref = f"A1:{last_col}{ws.max_row}"

def compute_word_error_rates(spreadsheet_path, target_worksheet, call_id_partial, wb):
    ws = wb[target_worksheet]
    headers = {cell.value: idx for idx, cell in enumerate(ws[1], start=1)}
    # ensure output columns exist
    for col in [LINE_WER_COL_NAME, S_COL_NAME, I_COL_NAME, D_COL_NAME, CHECK_WER_COL_NAME]:
        if col not in headers:
            headers[col] = len(headers) + 1
            ws.cell(row=1, column=headers[col], value=col)
    headers = {cell.value: idx for idx, cell in enumerate(ws[1], start=1)}
    # process each data row (starting from row 2)
    for row in ws.iter_rows(min_row=2):
        call_id = row[headers[CALL_ID_COL_NAME] - 1].value
        if call_id is None or call_id_partial not in str(call_id):
            continue
        ground_truth = row[headers[GROUND_TRUTH_COL_NAME] - 1].value or ""
        transcript = row[headers[TRANSCRIPTION_COL_NAME] - 1].value or ""
        pre_gt = preprocess(ground_truth)
        pre_tr = preprocess(transcript)
        try:
            response = requests.post(
                WER_POST_ENDPOINT,
                json={"groundTruth": pre_gt, "transcript": pre_tr},
                verify=False,
                timeout=10
            )
            line_wer = float(response.text.strip())
        except Exception:
            line_wer = "ERR"
        s, ins, d = count_sid(pre_gt, pre_tr)
        check_wer = calculate_wer(pre_gt, pre_tr)
        row_idx = row[0].row
        ws.cell(row=row_idx, column=headers[LINE_WER_COL_NAME], value=line_wer)
        ws.cell(row=row_idx, column=headers[S_COL_NAME], value=s)
        ws.cell(row=row_idx, column=headers[I_COL_NAME], value=ins)
        ws.cell(row=row_idx, column=headers[D_COL_NAME], value=d)
        ws.cell(row=row_idx, column=headers[CHECK_WER_COL_NAME], value=check_wer)
    apply_worksheet_formatting(ws)
    print("Updated worksheet", target_worksheet, "processed.")

def aggregate_column_for_target(wb, target_ws_name, col_name):
    ws = wb[target_ws_name]
    headers = {cell.value: idx for idx, cell in enumerate(ws[1], start=1)}
    col_index = headers[col_name]
    values = []
    for row in ws.iter_rows(min_row=2, values_only=True):
        val = row[col_index - 1]
        if val is not None:
            values.append(str(val).strip())
    return " ".join(values)

def create_summary_sheet_for_target(wb, target_ws_name):
    summary_sheet_name = target_ws_name + SUMMARY_WORKSHEET_SUFFIX
    if summary_sheet_name in wb.sheetnames:
        del wb[summary_sheet_name]
    summary_ws = wb.create_sheet(summary_sheet_name)
    target_ws = wb[target_ws_name]
    headers = [cell.value for cell in target_ws[1]]
    for col_idx, header in enumerate(headers, start=1):
        summary_ws.cell(row=1, column=col_idx, value=header)
    call_id = ""
    for row in target_ws.iter_rows(min_row=2, values_only=True):
        if row[headers.index(CALL_ID_COL_NAME)]:
            call_id = row[headers.index(CALL_ID_COL_NAME)]
            break
    aggregated_transcript = aggregate_column_for_target(wb, target_ws_name, TRANSCRIPTION_COL_NAME)
    aggregated_ground_truth = aggregate_column_for_target(wb, target_ws_name, GROUND_TRUTH_COL_NAME)
    try:
        response = requests.post(
            WER_POST_ENDPOINT,
            json={"groundTruth": preprocess(aggregated_ground_truth),
                  "transcript": preprocess(aggregated_transcript)},
            verify=False,
            timeout=10
        )
        line_wer = float(response.text.strip())
    except Exception:
        line_wer = "ERR"
    s, ins, d = count_sid(aggregated_ground_truth, aggregated_transcript)
    check_wer = calculate_wer(aggregated_ground_truth, aggregated_transcript)
    header_to_col = {header: idx for idx, header in enumerate(headers, start=1)}
    summary_ws.cell(row=2, column=header_to_col[CALL_ID_COL_NAME], value=call_id)
    summary_ws.cell(row=2, column=header_to_col[GROUND_TRUTH_COL_NAME], value=aggregated_ground_truth)
    summary_ws.cell(row=2, column=header_to_col[TRANSCRIPTION_COL_NAME], value=aggregated_transcript)
    summary_ws.cell(row=2, column=header_to_col[LINE_WER_COL_NAME], value=line_wer)
    summary_ws.cell(row=2, column=header_to_col[S_COL_NAME], value=s)
    summary_ws.cell(row=2, column=header_to_col[I_COL_NAME], value=ins)
    summary_ws.cell(row=2, column=header_to_col[D_COL_NAME], value=d)
    summary_ws.cell(row=2, column=header_to_col[CHECK_WER_COL_NAME], value=check_wer)
    apply_worksheet_formatting(summary_ws)
    wb.save(SPREADSHEET_PATH)
    print("Summary worksheet created for target", target_ws_name, "as:", summary_sheet_name)

def process_target_worksheets(target_ws_list):
    wb = load_workbook(filename=SPREADSHEET_PATH)
    for ws_name in target_ws_list:
        compute_word_error_rates(SPREADSHEET_PATH, ws_name, ws_name, wb)
        create_summary_sheet_for_target(wb, ws_name)
    aggregate_summaries_in_wb(wb)
    wb.save(SPREADSHEET_PATH)
    print("workbook saved after processing all worksheets.")

def aggregate_summaries_in_wb(wb):
    summary_sheetnames = [name for name in wb.sheetnames if name.endswith(SUMMARY_WORKSHEET_SUFFIX)]
    if not summary_sheetnames:
        print("No summary worksheets found.")
        return
    aggregate_sheet_name = "aggregate_summaries"
    if aggregate_sheet_name in wb.sheetnames:
        del wb[aggregate_sheet_name]
    agg_ws = wb.create_sheet(aggregate_sheet_name)
    # use header from the first summary worksheet.
    first_sum = wb[summary_sheetnames[0]]
    headers = [cell.value for cell in first_sum[1]]
    for col_idx, header in enumerate(headers, start=1):
        agg_ws.cell(row=1, column=col_idx, value=header)
    set_column_widths(agg_ws)
    current_row = 2
    for sheetname in summary_sheetnames:
        ws_sum = wb[sheetname]
        row_values = [cell.value for cell in ws_sum[2]]
        for col_idx, value in enumerate(row_values, start=1):
            agg_ws.cell(row=current_row, column=col_idx, value=value)
        current_row += 1
    agg_ws.freeze_panes = agg_ws["A2"]
    last_col = get_column_letter(agg_ws.max_column)
    agg_ws.auto_filter.ref = f"A1:{last_col}{agg_ws.max_row}"
    print("Aggregate summaries worksheet created as:", aggregate_sheet_name)


def main():
    process_target_worksheets(TARGET_WORKSHEETS)

if __name__ == "__main__":
    main()
    
==================================== colorize ========================

import re
from openpyxl import load_workbook
import xlsxwriter

SPREADSHEET_PATH = "j:/projects/sheet-logic/wer-test4.xlsx"
FORMATTED_OUTPUT_PATH = SPREADSHEET_PATH.replace(".xlsx", "_formatted.xlsx")
TARGET_WORKSHEETS = ["1234", "1345", "4567", "8901"]

CALL_ID_COL_NAME = "CallId"
GROUND_TRUTH_COL_NAME = "Ground Truth"
TRANSCRIPTION_COL_NAME = "Transcript"
S_COL_NAME = "S"
I_COL_NAME = "I"
D_COL_NAME = "D"
LINE_WER_COL_NAME = "WER_API"
CHECK_WER_COL_NAME = "WER_LOCAL"

WER_POST_ENDPOINT = "https://wer_host:3281/word_error_rate"

def preprocess(text):
    if not text:
        return ""
    text = str(text)
    text = text.lower()
    text = re.sub(r"[.,\-?â€¦]", " ", text)
    text = re.sub(r"\{[^}]*\}", "", text)
    text = re.sub(r"[\[\]]", "", text)
    text = re.sub(r"\s+", " ", text)
    return text.strip()

def count_sid_with_alignment(ground_truth, transcript):
    gt_tokens = preprocess(ground_truth).split()
    tr_tokens = preprocess(transcript).split()
    m, n = len(gt_tokens), len(tr_tokens)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(m + 1): dp[i][0] = i
    for j in range(n + 1): dp[0][j] = j

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if gt_tokens[i - 1] == tr_tokens[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i][j - 1] + 1, dp[i - 1][j] + 1)

    i, j = m, n
    s = i_ = d = 0
    align_gt = []
    align_tr = []
    while i > 0 or j > 0:
        if i > 0 and j > 0 and gt_tokens[i - 1] == tr_tokens[j - 1]:
            align_gt.insert(0, ("match", gt_tokens[i - 1]))
            align_tr.insert(0, ("match", tr_tokens[j - 1]))
            i -= 1; j -= 1
        elif i > 0 and j > 0 and dp[i][j] == dp[i - 1][j - 1] + 1:
            align_gt.insert(0, ("sub", gt_tokens[i - 1]))
            align_tr.insert(0, ("sub", tr_tokens[j - 1]))
            s += 1
            i -= 1; j -= 1
        elif j > 0 and dp[i][j] == dp[i][j - 1] + 1:
            align_gt.insert(0, ("ins", ""))
            align_tr.insert(0, ("ins", tr_tokens[j - 1]))
            i_ += 1
            j -= 1
        else:
            align_gt.insert(0, ("del", gt_tokens[i - 1]))
            align_tr.insert(0, ("del", ""))
            d += 1
            i -= 1
    return s, i_, d, align_gt, align_tr

def calculate_wer(ground_truth, transcript):
    s, i_, d, _, _ = count_sid_with_alignment(ground_truth, transcript)
    gt_tokens = preprocess(ground_truth).split()
    return 0.0 if len(gt_tokens) == 0 else round((s + i_ + d) / len(gt_tokens), 4)

def format_target_worksheets(target_worksheets):
    original_wb = load_workbook(SPREADSHEET_PATH)
    output_wb = xlsxwriter.Workbook(FORMATTED_OUTPUT_PATH)

    header = [
        CALL_ID_COL_NAME, GROUND_TRUTH_COL_NAME, TRANSCRIPTION_COL_NAME,
        LINE_WER_COL_NAME, S_COL_NAME, I_COL_NAME, D_COL_NAME, CHECK_WER_COL_NAME
    ]
    column_widths = [23, 70, 70, 9, 5, 5, 5, 9]

    header_fmt = output_wb.add_format({'bold': True, 'bg_color': '#D7E4BC'})
    fmt_normal = output_wb.add_format()
    fmt_sub = output_wb.add_format({'bold': True, 'font_color': '#FFA500'})
    fmt_del = output_wb.add_format({'italic': True, 'font_color': '#FF0000'})
    fmt_ins = output_wb.add_format({'underline': True, 'font_color': '#0000FF'})

    for ws_name in target_worksheets:
        if ws_name not in original_wb.sheetnames:
            continue
        input_ws = original_wb[ws_name]
        out_ws = output_wb.add_worksheet(ws_name)
        for col_idx, (col_name, width) in enumerate(zip(header, column_widths)):
            out_ws.write(0, col_idx, col_name, header_fmt)
            out_ws.set_column(col_idx, col_idx, width)

        header_indices = {cell.value: idx for idx, cell in enumerate(input_ws[1])}
        row_index = 1

        for row in input_ws.iter_rows(min_row=2, values_only=True):
            call_id = row[header_indices[CALL_ID_COL_NAME]]
            ground_truth = row[header_indices[GROUND_TRUTH_COL_NAME]] or ""
            transcript = row[header_indices[TRANSCRIPTION_COL_NAME]] or ""

            pre_gt = preprocess(ground_truth)
            pre_tr = preprocess(transcript)
            s, i_, d, align_gt, align_tr = count_sid_with_alignment(pre_gt, pre_tr)
            wer_api = row[header_indices.get(LINE_WER_COL_NAME, -1)] if LINE_WER_COL_NAME in header_indices else ""
            wer_local = calculate_wer(pre_gt, pre_tr)

            # Write CallId
            out_ws.write(row_index, 0, call_id)

            # Build and write Ground Truth cell
            gt_tokens = []
            for op, token in align_gt:
                fmt = fmt_normal
                if op == "sub": fmt = fmt_sub
                elif op == "del": fmt = fmt_del
                gt_tokens.extend([fmt, token + " "])
            if gt_tokens:
                out_ws.write_rich_string(row_index, 1, *gt_tokens)

            # Build and write Transcript cell
            tr_tokens = []
            for op, token in align_tr:
                fmt = fmt_normal
                if op == "sub": fmt = fmt_sub
                elif op == "ins": fmt = fmt_ins
                tr_tokens.extend([fmt, token + " "])
            if tr_tokens:
                out_ws.write_rich_string(row_index, 2, *tr_tokens)

            out_ws.write(row_index, 3, wer_api)
            out_ws.write(row_index, 4, s)
            out_ws.write(row_index, 5, i_)
            out_ws.write(row_index, 6, d)
            out_ws.write(row_index, 7, wer_local)

            row_index += 1

        out_ws.freeze_panes(1, 0)
        out_ws.autofilter(0, 0, row_index, len(header) - 1)

    output_wb.close()
    print(f"Formatted workbook saved to {FORMATTED_OUTPUT_PATH}")

def main():
    format_target_worksheets(TARGET_WORKSHEETS)

if __name__ == "__main__":
    main() 