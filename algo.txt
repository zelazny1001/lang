------------ html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta viewport="width=device-width, initial-scale=1.0">
    <title>Text Comparison with WER and PER</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <!-- File Loader and Text Areas -->
        <div class="file-loader-container">
            <div class="file-loader">
                <label for="groundTruthFileInput">Ground Truth File:</label>
                <input type="file" id="groundTruthFileInput">
            </div>
            <div class="file-loader">
                <label for="transcriptionFileInput">Transcription File:</label>
                <input type="file" id="transcriptionFileInput">
            </div>
        </div>
        <label for="exclude">Exclude Tokens (pipe-separated):</label>
        <input type="text" id="exclude" name="exclude" placeholder="Enter tokens separated by |">
        
        <div class="text-area-container">
            <div class="text-box">
                <label for="groundTruth">Ground Truth:</label>
                <div id="groundTruth" class="text-display" contenteditable="true"></div>
                <div class="button-container">
                    <button id="compareButton">Compare</button>
                </div>
            </div>
            <div class="text-box">
                <label for="transcription">Transcription:</label>
                <div id="transcription" class="text-display" contenteditable="true"></div>
                <div class="button-container">
                    <button id="clearButton">Clear</button>
                </div>
            </div>
        </div>

        <!-- Results Section -->
        <div class="results-container">
            <!--h2>Results:</h2-->
            <div class="results-box">
                <input type="text" id="werResult" readonly value="WER: %, S: , D: , I: , N: ">
                <input type="text" id="perResult" readonly value="PER: %, S: 0, D: , I: , N: ">
            </div>
        </div>
        
        <!-- WER Details Section -->
        <div class="details-container">
            <h3>WER:</h3>
            <div class="wer-item">
                <label for="substitutionDetails">Substitutions:</label>
                <textarea id="substitutionDetails" class="details-box" readonly></textarea>
            </div>
            <div class="wer-item">
                <label for="deletionDetails">Deletions:</label>
                <textarea id="deletionDetails" class="details-box" readonly></textarea>
            </div>
            <div class="wer-item">
                <label for="insertionDetails">Insertions:</label>
                <textarea id="insertionDetails" class="details-box" readonly></textarea>
            </div>
        </div>

        <!-- PER Details Section -->
        <div class="details-container">
            <h3>PER:</h3>
            <!-- Placeholder for alignment -->
            <div class="wer-item placeholder-item">
                <!-- Empty div to occupy space of Substitutions box -->
            </div>
            <div class="wer-item">
                <label for="perDeletionDetails">Deletions:</label>
                <textarea id="perDeletionDetails" class="details-box" readonly></textarea>
            </div>
            <div class="wer-item">
                <label for="perInsertionDetails">Insertions:</label>
                <textarea id="perInsertionDetails" class="details-box" readonly></textarea>
            </div>
        </div>

    </div>

    <script src="script.js"></script>
</body>
</html>

------------------ script

let cachedTranscriptionContent = null;

document.getElementById("groundTruthFileInput").addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
        populateTextArea("groundTruth", reader.result);
        if (cachedTranscriptionContent) {
            processTranscriptionFile(cachedTranscriptionContent);
        }
    };
    reader.readAsText(file);
});

document.getElementById("transcriptionFileInput").addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = () => {
        cachedTranscriptionContent = reader.result;
        processTranscriptionFile(cachedTranscriptionContent);
    };
    reader.readAsText(file);
});

document.getElementById("compareButton").addEventListener("click", () => {
    const groundTruthDiv = document.getElementById("groundTruth");
    const transcriptionDiv = document.getElementById("transcription");

    const groundTruthText = groundTruthDiv.innerText.trim();
    const transcriptionText = transcriptionDiv.innerText.trim();

    const exclusionInput = document.getElementById("exclude").value;
    const exclusions = parseExclusions(exclusionInput);

    const preprocessedGroundTruth = preprocessText(groundTruthText, exclusions).split(/\s+/);
    const preprocessedTranscription = preprocessText(transcriptionText, exclusions).split(/\s+/);

    const { alignedGroundTruth, alignedTranscription } = alignTexts(preprocessedGroundTruth, preprocessedTranscription);

    // Update the ground truth div with highlights (isTranscription = false)
    groundTruthDiv.innerHTML = formatHighlightedText(alignedGroundTruth, alignedTranscription, false);

    // Update the transcription div with highlights (isTranscription = true)
    transcriptionDiv.innerHTML = formatHighlightedText(alignedTranscription, alignedGroundTruth, true);

    // WER Calculation
    const werResult = calculateWER(
        preprocessedGroundTruth.join(" "),
        preprocessedTranscription.join(" ")
    );

    // Update WER results in the input box
    document.getElementById("werResult").value = `WER: ${werResult.wer}%, S: ${werResult.substitutions}, D: ${werResult.deletions}, I: ${werResult.insertions}, N: ${werResult.total}`;

    // Update WER details
    document.getElementById("substitutionDetails").value = werResult.details.substitutions.reverse().join("\n");
    document.getElementById("deletionDetails").value = werResult.details.deletions.reverse().join("\n");
    document.getElementById("insertionDetails").value = werResult.details.insertions.reverse().join("\n");

    // PER Calculation
    const perResult = calculatePER(
        preprocessedGroundTruth.join(" "),
        preprocessedTranscription.join(" ")
    );

    // Update PER results in the input box
    document.getElementById("perResult").value = `PER: ${perResult.wer}%, S: 0, D: ${perResult.deletions}, I: ${perResult.insertions}, N: ${perResult.total}`;

    // Update PER details
    document.getElementById("perDeletionDetails").value = perResult.details.deletions.join("\n");
    document.getElementById("perInsertionDetails").value = perResult.details.insertions.join("\n");
});

document.getElementById("clearButton").addEventListener("click", () => {
    const groundTruthDiv = document.getElementById("groundTruth");
    const transcriptionDiv = document.getElementById("transcription");

    // Clear highlights and reset text
    groundTruthDiv.innerText = groundTruthDiv.innerText;
    transcriptionDiv.innerText = transcriptionDiv.innerText;

    // Reset WER and PER results
    document.getElementById("werResult").value = `WER: %, S: , D: , I: , N: `;
    document.getElementById("perResult").value = `PER: %, S: 0, D: , I: , N: `;

    // Clear WER details
    document.getElementById("substitutionDetails").value = "";
    document.getElementById("deletionDetails").value = "";
    document.getElementById("insertionDetails").value = "";

    // Clear PER details
    document.getElementById("perDeletionDetails").value = "";
    document.getElementById("perInsertionDetails").value = "";
});

function formatHighlightedText(primaryText, secondaryText, isTranscription) {
    return primaryText.map((word, index) => {
        const otherWord = secondaryText[index] || "";

        if (word.toLowerCase() === otherWord.toLowerCase()) {
            // Words match
            return word;
        } else if (isTranscription) {
            // Formatting the transcription display
            if (otherWord === "") {
                // Ground truth word is missing; insertion in transcription
                return `<span class="highlight insertion">${word}</span>`;
            } else if (word === "") {
                // Transcription word is missing; deletion in transcription (skip)
                return '';
            } else {
                // Substitution
                return `<span class="highlight substitution">${word}</span>`;
            }
        } else {
            // Formatting the ground truth display
            if (otherWord === "") {
                // Transcription word is missing; deletion in transcription
                return `<span class="highlight deletion">${word}</span>`;
            } else if (word === "") {
                // Ground truth word is missing; insertion in transcription (skip)
                return '';
            } else {
                // Substitution
                return `<span class="highlight substitution">${word}</span>`;
            }
        }
    }).join(' ');
}

// process the transcription file
function processTranscriptionFile(fileContent) {
    const groundTruthFileName = getGroundTruthFileName();
    if (!groundTruthFileName) {
        alert("Ground Truth filename not found. Please load a Ground Truth file first.");
        return;
    }

    const key = extractGroundTruthKey(groundTruthFileName);
    if (!key) {
        alert("Unable to extract key from Ground Truth filename.");
        return;
    }

    const rows = parsePipeSeparatedFile(fileContent);
    const filteredRows = filterAndSortRows(rows, key);
    const finalRows = filteredRows; // You can apply additional filters if needed
    const transcripts = finalRows.map(row => row.transcript).join("\n");
    populateTextArea("transcription", transcripts);
}

// get the ground truth file name
function getGroundTruthFileName() {
    const fileInput = document.getElementById("groundTruthFileInput");
    return fileInput.files[0]?.name || null;
}

// extract the key from the ground truth file name
function extractGroundTruthKey(filename) {
    const match = filename.match(/ground_truth_(.*?)\./);
    return match ? match[1] : null;
}

// parse a pipe-separated file
function parsePipeSeparatedFile(content) {
    const lines = content.split("\n").filter(line => line.trim() !== "");
    const headers = lines[0].split("|").map(header => header.trim());
    const rows = lines.slice(1).map(line => {
        const values = line.split("|").map(value => value.trim());
        const row = {};
        headers.forEach((header, index) => {
            row[header] = values[index];
        });
        row.seqNum = parseInt(row.seqNum, 10);
        row.samples = parseInt(row.samples, 10);
        row.tokens = parseInt(row.tokens, 10);
        return row;
    });
    return rows;
}

// filter and sort rows based on the key
function filterAndSortRows(rows, key) {
    return rows
        .filter(row => row.filename.includes(key))
        .sort((a, b) => a.seqNum - b.seqNum);
}

// populate a text area or div
function populateTextArea(areaId, content) {
    const textArea = document.getElementById(areaId);
    textArea.innerText = content;
}

// preprocess text (remove punctuation, apply exclusions, etc.)
function preprocessText(text, exclusions) {
    text = text.replace(/\n+/g, " ");
    text = text.replace(/<.*?>/g, " ");
    text = text.replace(/[.,!?;]/g, " ").trim();
    exclusions.forEach(word => {
        const regex = new RegExp(`\\b${word}\\b`, "gi");
        text = text.replace(regex, " ");
    });
    return text.replace(/\s+/g, " ");
}

// parse exclusions
function parseExclusions(exclusionInput) {
    return exclusionInput.split('|').map(word => word.trim()).filter(word => word !== "");
}

// calculate WER
function calculateWER(groundTruth, transcription) {
    const groundWords = groundTruth.split(/\s+/);
    const transcribedWords = transcription.split(/\s+/);
    const m = groundWords.length;
    const n = transcribedWords.length;

    const dp = Array(m + 1).fill().map(() => Array(n + 1).fill(0));

    // Initialize DP table
    for (let i = 0; i <= m; i++) {
        dp[i][0] = i;
    }
    for (let j = 0; j <= n; j++) {
        dp[0][j] = j;
    }

    const details = { substitutions: [], deletions: [], insertions: [] };

    // DP computation
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (groundWords[i - 1] === transcribedWords[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + Math.min(
                    dp[i - 1][j - 1], // Substitution
                    dp[i - 1][j],     // Deletion
                    dp[i][j - 1]      // Insertion
                );
            }
        }
    }

    // Backtracking to find errors
    let i = m, j = n;
    let substitutions = 0, deletions = 0, insertions = 0;

    while (i > 0 || j > 0) {
        if (i > 0 && j > 0 && groundWords[i - 1] === transcribedWords[j - 1]) {
            // Match
            i--;
            j--;
        } else if (i > 0 && (j === 0 || dp[i][j] === dp[i - 1][j] + 1)) {
            // Deletion
            deletions++;
            details.deletions.push(groundWords[i - 1]);
            i--;
        } else if (j > 0 && (i === 0 || dp[i][j] === dp[i][j - 1] + 1)) {
            // Insertion
            insertions++;
            details.insertions.push(transcribedWords[j - 1]);
            j--;
        } else if (i > 0 && j > 0 && dp[i][j] === dp[i - 1][j - 1] + 1) {
            // Substitution
            substitutions++;
            details.substitutions.push(`${groundWords[i - 1]} -> ${transcribedWords[j - 1]}`);
            i--;
            j--;
        }
    }

    const wer = ((substitutions + deletions + insertions) / m) * 100;
    return {
        wer: Math.min(wer, 100).toFixed(2),
        substitutions,
        deletions,
        insertions,
        total: m,
        details
    };
}

// calculate PER
function calculatePER(groundTruth, transcription) {
    const groundWords = groundTruth.split(/\s+/);
    const transcribedWords = transcription.split(/\s+/);
    const m = groundWords.length;

    const groundWordCounts = {};
    const transcribedWordCounts = {};

    groundWords.forEach(word => {
        groundWordCounts[word] = (groundWordCounts[word] || 0) + 1;
    });

    transcribedWords.forEach(word => {
        transcribedWordCounts[word] = (transcribedWordCounts[word] || 0) + 1;
    });

    let deletions = 0, insertions = 0;
    const details = { substitutions: [], deletions: [], insertions: [] };

    const allWords = new Set([...Object.keys(groundWordCounts), ...Object.keys(transcribedWordCounts)]);

    allWords.forEach(word => {
        const groundCount = groundWordCounts[word] || 0;
        const transcribedCount = transcribedWordCounts[word] || 0;

        if (groundCount > transcribedCount) {
            const diff = groundCount - transcribedCount;
            deletions += diff;
            for (let i = 0; i < diff; i++) {
                details.deletions.push(word);
            }
        } else if (transcribedCount > groundCount) {
            const diff = transcribedCount - groundCount;
            insertions += diff;
            for (let i = 0; i < diff; i++) {
                details.insertions.push(word);
            }
        }
        // Substitutions are not counted in PER
    });

    const per = ((insertions + deletions) / m) * 100;

    return {
        wer: Math.min(per, 100).toFixed(2), // Field name 'wer' is kept for consistency
        substitutions: 0, // Substitutions are not applicable in PER
        deletions,
        insertions,
        total: m,
        details
    };
}

// align texts for highlighting
function alignTexts(groundTruth, transcription) {
    const m = groundTruth.length;
    const n = transcription.length;
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));

    for (let i = 0; i <= m; i++) dp[i][0] = i;
    for (let j = 0; j <= n; j++) dp[0][j] = j;

    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (groundTruth[i - 1].toLowerCase() === transcription[j - 1].toLowerCase()) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + Math.min(
                    dp[i - 1][j],     // Deletion
                    dp[i][j - 1],     // Insertion
                    dp[i - 1][j - 1]  // Substitution
                );
            }
        }
    }

    const alignedGroundTruth = [];
    const alignedTranscription = [];
    let i = m, j = n;

    while (i > 0 || j > 0) {
        if (i > 0 && j > 0 && groundTruth[i - 1].toLowerCase() === transcription[j - 1].toLowerCase()) {
            alignedGroundTruth.unshift(groundTruth[i - 1]);
            alignedTranscription.unshift(transcription[j - 1]);
            i--;
            j--;
        } else if (i > 0 && (j === 0 || dp[i][j] === dp[i - 1][j] + 1)) {
            alignedGroundTruth.unshift(groundTruth[i - 1]);
            alignedTranscription.unshift("");
            i--;
        } else if (j > 0 && (i === 0 || dp[i][j] === dp[i][j - 1] + 1)) {
            alignedGroundTruth.unshift("");
            alignedTranscription.unshift(transcription[j - 1]);
            j--;
        } else {
            alignedGroundTruth.unshift(groundTruth[i - 1]);
            alignedTranscription.unshift(transcription[j - 1]);
            i--;
            j--;
        }
    }

    return { alignedGroundTruth, alignedTranscription };
}

------------------ css

body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

.container {
    max-width: 900px;
    margin: 0 auto;
}

label {
    font-weight: bold;
    margin-bottom: 5px;
    display: block;
}

input[type="text"] {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 14px;
}

.file-loader-container {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
    gap: 15px;
}

.file-loader {
    display: flex;
    align-items: center;
    gap: 10px;
    flex: 1;
}

#groundTruthFileInput, #transcriptionFileInput {
    flex: 1;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.text-area-container {
    display: flex;
    justify-content: space-between;
    gap: 25px;
    margin-bottom: 15px;
}

.text-box {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-width: 0;
}

.text-display {
    width: 100%;
    height: 300px;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 10px;
    overflow-y: auto;
    background-color: white;
    font-family: Arial, sans-serif;
    font-size: 14px;
    color: black;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.button-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

button {
    padding: 10px 15px;
    font-size: 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#compareButton {
    background-color: #DC3545;
    color: white;
}

#clearButton {
    background-color: #007BFF;
    color: white;
}

.highlight.deletion {
    background-color: red;
    color: white;
}

.highlight.substitution {
    background-color: orange;
}

.highlight.insertion {
    background-color: blue;
	color: white;
}

/* Results Section Styles */
.results-container {
    display: flex;
    align-items: center;
	margin-left: 100px;
    margin-top: 20px;
}

.results-box input[type="text"] {
    font-size: 18px;
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #f9f9f9;
    color: black;
    flex: 0 1 auto;
    width: auto;
    min-width: 300px;
    max-width: 450px;
    text-align: center;
}

/* Details Section Styles */
.details-container {
    display: flex;
    flex-wrap: wrap;
    gap: 40px;
    margin-top: 20px;
    align-items: flex-start;
}

.wer-item {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: 5px;
    min-width: 100px;
}

.details-box {
    width: 100%;
    height: 100px;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
    resize: none;
    background-color: #f9f9f9;
    color: black;
}

/* Placeholder for alignment */
.placeholder-item {
    visibility: hidden;
    height: 0;
	width: 200px;
    margin-bottom: 15px;
}