def getLastNWords(inputString, N):
    words = inputString.split()
    return ' '.join(words[-N:]) if N < len(words) else inputString
	
def getFirstNWords(inputString, N):
    words = inputString.split()
    return ' '.join(words[:N])

======================================

# complaint_type_stub.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import random

app = FastAPI()

class ComplaintTypeRequest(BaseModel):
    transcript: str

def get_complaint_type(transcript):
    complaint_types = ["CT1", "CT2", "CT3", "CT4", "CT5", "CT6", "CT7", "CT8", "CT9", "CT10", "otherType"]
    if random.random() < 0.5:
        return "noComplaint"
    else:
        return random.choice(complaint_types)


@app.post("/complaintType")
async def complaint_type_endpoint(request: ComplaintTypeRequest):
    try:
        complaint_type = get_complaint_type(request.transcript)
        return {"complaintType": complaint_type}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("complaint_type_stub:app", host="localhost", port=9500, reload=True)

======================================

# complaint_summary_stub.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

class ComplaintSummaryRequest(BaseModel):
    transcript: str
    n: Optional[int] = None

def get_complaint_summary(transcript, n):
    if n is not None:
        return ' '.join(transcript.split()[:n])
    else: # use actual summary here ...
        return transcript

@app.post("/complaintSummary")
async def complaint_summary_endpoint(request: ComplaintSummaryRequest):
    try:
        result = get_complaint_summary(request.transcript, request.n)
        return {"complaintSummary": result}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("complaint_summary_stub:app", host="localhost", port=9501, reload=True)