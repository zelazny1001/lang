    private float[] calculateFFT(float[] audio) {
        int n = audio.length;
        int nextPowerOf2 = 1;
        while (nextPowerOf2 < n) {
            nextPowerOf2 *= 2;
        }

        double[] audioDouble = new double[nextPowerOf2];
        for (int i = 0; i < n; i++) {
            audioDouble[i] = audio[i];
        }

        FastFourierTransformer transformer = new FastFourierTransformer(DftNormalization.UNITARY);
        Complex[] complexResult = transformer.transform(audioDouble, TransformType.FORWARD);

        float[] result = new float[complexResult.length];
        for (int i = 0; i < complexResult.length; i++) {
            result[i] = (float) complexResult[i].abs();
        }

        return result;
    }